<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Programmer's Probe]]></title>
  <link href="http://sdanzig.github.io/atom.xml" rel="self"/>
  <link href="http://sdanzig.github.io/"/>
  <updated>2013-08-07T22:17:33-04:00</updated>
  <id>http://sdanzig.github.io/</id>
  <author>
    <name><![CDATA[Scott Danzig]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Do you care if people understand you?]]></title>
    <link href="http://sdanzig.github.io/blog/2013/07/29/do-you-care-if-people-understand-you/"/>
    <updated>2013-07-29T00:00:00-04:00</updated>
    <id>http://sdanzig.github.io/blog/2013/07/29/do-you-care-if-people-understand-you</id>
    <content type="html"><![CDATA[<div class='post'>
<div class="MsoNormal" style="text-align: justify;">The last S in the popular acronym K.I.S.S.&nbsp; (Keep it Simple Stupid) needs to be emphasized.&nbsp; It is told to someone who is being intellectually lazy, which implies that those who keep it simple are the ones using their gray matter effectively. &nbsp;The world needs to be more conscious that information is not transmitted magically.&nbsp; It requires both acknowledgement of the gap between neurons in distinct minds, and also creativity to reshape a block of knowledge into a way that caters to the listeners.</div><div class="MsoNormal"><o:p></o:p></div><div class="MsoNormal" style="text-align: justify;"><br /></div><h3><b style="mso-bidi-font-weight: normal;">President Obama said “APIs”</b></h3><div class="MsoNormal" style="text-align: justify;"><br /></div><div class="MsoNormal" style="text-align: justify;">Briefly digressing, open-source software is free, publicly available software, which powers much of the internet.<span style="mso-spacerun: yes;">&nbsp; </span>It’s also permitted to modify it to your specific purposes.<span style="mso-spacerun: yes;">&nbsp; </span>Closed-source software is the opposite, and benefits only one person or company.<span style="mso-spacerun: yes;">&nbsp; </span>Open-source thrives not on profit, but rather on public awareness and a sense of community, due to it being dependent on reciprocation in some form.<o:p></o:p></div><div class="MsoNormal" style="text-align: justify;"><br /></div><div class="MsoNormal" style="text-align: justify;">I attended a conference on open-source software, OSCON 2013, and I witnessed a tragedy.<span style="mso-spacerun: yes;">&nbsp; </span>The U.S. government sponsors a web site, <a href="http://www.whitehouse.gov/">http://www.whitehouse.gov</a>, which promotes “Open Government”, “Open Data”, and “Open-Source”.<span style="mso-spacerun: yes;">&nbsp; </span>See the mission of this specific department here:<span style="mso-spacerun: yes;">&nbsp; </span><a href="http://www.whitehouse.gov/developers">http://www.whitehouse.gov/developers</a>. <span style="mso-spacerun: yes;">&nbsp;</span>At OSCON 2013, Leigh Heyman, Director of New Media Technologies for the Executive Office of the President, showed us a video.</div><div class="MsoNormal" style="text-align: justify;"><o:p></o:p></div><div class="MsoNormal" style="text-align: justify;"><br /></div><div class="MsoNormal" style="text-align: justify;">It was a simple interaction between himself and none other than President Barack Obama himself, where the President inquires to Leigh what his department is working on next.<span style="mso-spacerun: yes;">&nbsp; </span>Leigh responded with “APIs”.<span style="mso-spacerun: yes;">&nbsp; </span>The President parroted his words, and then, as you might expect from a seasoned officeholder, jocularly conceded he had no idea what an API was, followed by laughter throughout the room.<span style="mso-spacerun: yes;">&nbsp; </span>We at OSCON laughed as well, taking pride in the moment where “a techie like us” got the President to utter a technical acronym.<span style="mso-spacerun: yes;">&nbsp; </span>However, this was nothing less than a <b style="mso-bidi-font-weight: normal;">potentially</b> <b style="mso-bidi-font-weight: normal;">tremendous but lost opportunity</b>.<span style="mso-spacerun: yes;">&nbsp; </span>While API, Application Programming Interface, is one of the most common technical terms in modern software engineering, it’s still a <b style="mso-bidi-font-weight: normal;">technical acronym that</b> <b style="mso-bidi-font-weight: normal;">no one should expect the listener to have knowledge of</b>. Leigh, instead, could have said “We’re developing an interface for other software to access our data easily over the internet.”<o:p></o:p></div><div class="MsoNormal" style="text-align: justify;"><br /></div><div class="MsoNormal" style="text-align: justify;">The Director of a publicly-funded, high-exposure technology department should certainly have <b style="mso-bidi-font-weight: normal;">prepared in advance a simple, canned summary</b> of the future direction of his group’s efforts.<span style="mso-spacerun: yes;">&nbsp; </span>Effective elevator pitch-style explanations are not easy to create, but if you want to be able to consistently explain something on a moment’s notice, you must <b style="mso-bidi-font-weight: normal;">think it through and practice</b>.<span style="mso-spacerun: yes;">&nbsp; </span>This was a rare opportunity to transfer knowledge of the benefits of the open-source community and data sharing to a figure of such influence.<span style="mso-spacerun: yes;">&nbsp; </span>Instead, this was reduced to a cute moment where “the open-source community affected something high-profile”.<span style="mso-spacerun: yes;">&nbsp; </span>The recent George Zimmerman trial was interrupted when a witness gave testimony remotely via the internet (using Skype).<span style="mso-spacerun: yes;">&nbsp; </span>People sent chat requests to the witness, able to interrupt something on public television.<span style="mso-spacerun: yes;">&nbsp; </span>That is what Leigh’s interaction with the President equated to, and it could have been so much more.<span style="mso-spacerun: yes;">&nbsp; </span>Speaking directly to the President is not in any way relying on <a href="http://en.wikipedia.org/wiki/Butterfly_effect">the Butterfly Effect</a> to advance your goals.<o:p></o:p></div><div class="MsoNormal" style="text-align: justify;"><br /></div><h3><b style="mso-bidi-font-weight: normal;">The TCP tuning talk</b></h3><div class="MsoNormal" style="text-align: justify;"><br /></div><div class="MsoNormal" style="text-align: justify;">Fast-forward to another much more technical talk at OSCON, on improving the performance of TCP, delivered by Jason Cook of a digital content delivery internet company, Fastly.<span style="mso-spacerun: yes;">&nbsp; </span>TCP is one of the core methods by which computers on the internet can communicate. <span style="mso-spacerun: yes;">&nbsp;</span>Hoping for deeper level insights into the subtleties of TCP, I attended this talk.<o:p></o:p></div><div class="MsoNormal" style="text-align: justify;"><br /></div><div class="MsoNormal" style="text-align: justify;">Jason started by talking about how TCP works, mentioning how two computers initiate communication sending “SYNs” and “ACKs” to each other.<span style="mso-spacerun: yes;">&nbsp; </span>I personally have dove deep into TCP before, and realized he was describing the “handshaking” procedure two computers use to start communicating with each other.<span style="mso-spacerun: yes;">&nbsp; </span>I knew TCP confirms messages are received by using “ACK”nowledgement messages, but I forgot why messages are called SYNs. <span style="mso-spacerun: yes;">&nbsp;</span>Most programmers communicate through TCP using pre-built functionality that alleviates concerns of the inner workings of TCP, but here, the speaker was <b style="mso-bidi-font-weight: normal;">assuming those attending his talk would be familiar</b> with it, reviewing some key points.<span style="mso-spacerun: yes;">&nbsp; </span>He was also <b style="mso-bidi-font-weight: normal;">using acronyms that many in the audience would not understand</b>.<span style="mso-spacerun: yes;">&nbsp; </span>He continued from there <b style="mso-bidi-font-weight: normal;">speaking very fast</b>, using equally technical terminology.<o:p></o:p></div><div class="MsoNormal" style="text-align: justify;"><br /></div><div class="MsoNormal" style="text-align: justify;">This demonstrates a couple of additional problems.<span style="mso-spacerun: yes;">&nbsp; </span>If you only cater to a particular level of expertise, <b style="mso-bidi-font-weight: normal;">your audience should be appropriately filtered</b>, perhaps by explicit language in the abstract of a talk.<span style="mso-spacerun: yes;">&nbsp; </span>It is true Jason only had limited time to cover the intended subject matter, but if he wanted to educate a wider audience, he should have <b style="mso-bidi-font-weight: normal;">pared down the information as necessary to allow for more explanation and cogitation</b>within the minds in his audience, which could have included anyone within the open-source community.<o:p></o:p></div><div class="MsoNormal" style="text-align: justify;"><br /></div><h3><b style="mso-bidi-font-weight: normal;">Practicing what I preach</b></h3><div class="MsoNormal" style="text-align: justify;"><br /></div><div class="MsoNormal" style="text-align: justify;">Before I personally write or say anything, I <b style="mso-bidi-font-weight: normal;">run it against what I want to assume the reader or listener knows</b>.<span style="mso-spacerun: yes;">&nbsp; </span>Perhaps I shouldn’t have assumed people know who George Zimmerman is, but enough do, and the <b style="mso-bidi-font-weight: normal;">point I was making was</b> <b style="mso-bidi-font-weight: normal;">not dependent on this knowledge</b>.<span style="mso-spacerun: yes;">&nbsp; </span>However, I did not assume you knew what TCP was.<span style="mso-spacerun: yes;">&nbsp; </span>Most programmers today would know what TCP is, but I want non-programmers to understand everything in this article too.<span style="mso-spacerun: yes;">&nbsp; </span>I did not tell you that TCP stood for “Transmission Control Protocol” because I wanted to <b style="mso-bidi-font-weight: normal;">keep it simple and not distract</b>.<span style="mso-spacerun: yes;">&nbsp; </span>Being able to write or speak in a way that, for a target audience, is understandable by most if not all of them, and yet does not stray significantly from the over-arching purpose, is not an easy task, but should be the intention of any individual that endeavors to communicate<o:p></o:p></div><div class="MsoNormal" style="text-align: justify;"><br /></div><div class="MsoNormal" style="text-align: justify;">I recently wrote <a href="http://sdanzig.blogspot.com/2013/07/introduction-to-git-along-with-sensible.html">an article on Git</a>, a popular open-source software used to store the incremental versions of software code.<span style="mso-spacerun: yes;">&nbsp; </span>At first, I only intended to write an article about how I use it, but then I realized I would like the article to be useful to anyone just getting into programming who may not necessarily be familiar with Git.<span style="mso-spacerun: yes;">&nbsp; </span>I proceeded to add a very lengthy tutorial, with small steps and plenty of screen shots.<span style="mso-spacerun: yes;">&nbsp; </span>It’s true there are many other tutorials out there on Git, but Git is not the easiest tool to learn, and that tells me there’s a need for someone with my unassuming approach to write a tutorial about it.<span style="mso-spacerun: yes;">&nbsp; </span>I could have likely saved a fair bit of time and found the most unassuming Git tutorial on the internet and referred to it.<span style="mso-spacerun: yes;">&nbsp; </span>This is a reasonable compromise, but it only works if what you refer to is also geared toward your intended audience.<o:p></o:p></div><div class="MsoNormal" style="text-align: justify;"><br /></div><div class="MsoNormal" style="text-align: justify;">If I wanted to, I could have been much lazier and just left the tutorial off altogether and targeted a smaller audience&#8211;perhaps those already familiar with Git.<span style="mso-spacerun: yes;">&nbsp; </span>If I did, I would have stated clearly at the beginning whom I’m writing for, and it would have saved me a lot of time.<span style="mso-spacerun: yes;">&nbsp; </span>Anyone who wasn’t very familiar with Git that ignored that warning would be doing so at their own peril.<span style="mso-spacerun: yes;">&nbsp; </span>If I left that warning off, I am selfishly <b style="mso-bidi-font-weight: normal;">imposing on them the unexpected</b> <b style="mso-bidi-font-weight: normal;">burden</b> of doing significant research and self-learning in order for their investment in reading time to be worthwhile.<o:p></o:p></div><div class="MsoNormal" style="text-align: justify;"><br /></div><h3><b style="mso-bidi-font-weight: normal;">Simplifying is not easy</b></h3><div class="MsoNormal" style="text-align: justify;"><br /></div><div class="MsoNormal" style="text-align: justify;">There is a wonderful article geared toward programmers, <a href="http://www.gar1t.com/blog/2012/06/10/solving-embarrassingly-obvious-problems-in-erlang/">Solving Embarrassingly Obvious Problems In Erlang</a>.<span style="mso-spacerun: yes;">&nbsp; </span>You don’t have to read that article, however, to get my point.<span style="mso-spacerun: yes;">&nbsp; </span>The author’s purpose is to promote maintainability of software code, or how understandable the code is to a programmer unfamiliar it.<o:p></o:p></div><div class="MsoNormal" style="text-align: justify;"><br /></div><div class="MsoNormal" style="text-align: justify;">A function is a named block of instructions, with inputs and an output.<span style="mso-spacerun: yes;">&nbsp; </span>Most computer programs are constructed of many functions.<span style="mso-spacerun: yes;">&nbsp; </span>A simple example is:<o:p></o:p></div><div class="MsoNormal" style="text-align: justify;"><br /></div><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">add(a, b) { return a+b }</span></blockquote><div class="MsoNormal" style="text-align: justify;"><o:p></o:p></div><div class="MsoNormal" style="text-align: justify;"><br /></div><div class="MsoNormal" style="text-align: justify;">In this example, the function name is “add”, “a” and “b” are inputs, and the output is the sum.<span style="mso-spacerun: yes;">&nbsp; </span>A programmer can choose to write a very complex function, that does numerous things in order to compute the return value.<span style="mso-spacerun: yes;">&nbsp; </span>The author suggests breaking functions down into tiny functions, each named in a way that fully describes the purpose of the function.<span style="mso-spacerun: yes;">&nbsp; </span>When breaking up a function, he suggests first asking, for each line, “What’s going on here?” and then moving that line to a function with a name answering that question.<span style="mso-spacerun: yes;">&nbsp; </span>This results in the functions providing a form of documentation describing the code.<span style="mso-spacerun: yes;">&nbsp; </span>Understanding what a function does becomes very obvious for any future programmer maintaining the software.<o:p></o:p></div><div class="MsoNormal" style="text-align: justify;"><br /></div><div class="MsoNormal" style="text-align: justify;">A key point in this article is that answering the question “What’s going on here?” is <b style="mso-bidi-font-weight: normal;">not</b>easy.<span style="mso-spacerun: yes;">&nbsp; </span>It takes some thought to really break down what is being said into tiny, very maintainable components.<span style="mso-spacerun: yes;">&nbsp;&nbsp; </span>This process is necessary, however, because this information must be conveyed somehow.<span style="mso-spacerun: yes;">&nbsp; </span>If you do not cater toward the unfamiliar, than only the familiar will be able to maintain your code.<span style="mso-spacerun: yes;">&nbsp; </span>Otherwise, you should either acknowledge that your code cannot be changed without you and others intimately familiar with it being available, or, you are making it much more painful for future developers to be able to work with your code.<span style="mso-spacerun: yes;">&nbsp; </span>They’ll have to logically deduce why you do everything that you do, and they’ll have to often scour the internet and other resources to assist with this.<span style="mso-spacerun: yes;">&nbsp; </span>Some parts of your code may be outright impossible to understand without some explanation.<o:p></o:p></div><div class="MsoNormal" style="text-align: justify;"><br /></div><div class="MsoNormal" style="text-align: justify;">Aside from that obvious benefit, the “What am I really trying to say?” mentality increases your own understanding.<span style="mso-spacerun: yes;">&nbsp; </span><b style="mso-bidi-font-weight: normal;">You must be knowledgeable to be explicit</b>.<span style="mso-spacerun: yes;">&nbsp; </span>This article demonstrates this by showing that when you are explicit about what your code is doing, you are afforded the opportunity to optimize it due to your increased understanding.<span style="mso-spacerun: yes;">&nbsp; </span>Likewise, when catering an explanation to a less knowledgeable target audience, you are not only forced to truly <b style="mso-bidi-font-weight: normal;">master the subject matter</b>, but you are also able to <b style="mso-bidi-font-weight: normal;">state it more clearly</b>.<o:p></o:p></div><div class="MsoNormal" style="text-align: justify;"><br /></div><div class="MsoNormal" style="text-align: justify;">Another great thing about this article is that the author uses the Erlang programming language, but fully understands his audience may be completely unfamiliar with Erlang.<span style="mso-spacerun: yes;">&nbsp; </span>He makes a <b style="mso-bidi-font-weight: normal;">conscious choice to target</b>programmers of all languages, addressing the difficulty in understanding Erlang syntax early on, then he <b style="mso-bidi-font-weight: normal;">remains sensitive to that choice</b>.<o:p></o:p></div><div class="MsoNormal" style="text-align: justify;"><br /></div><h3><b style="mso-bidi-font-weight: normal;">One small hump can block a mountain of understanding</b></h3><div class="MsoNormal" style="text-align: justify;"><br /></div><div class="MsoNormal" style="text-align: justify;">Erring on the side of unfamiliarity when assuming the knowledge level of your target audience is the safer practice, but try to not do more than you have to by encouraging the listeners to volunteer what they already know. &nbsp;However, <b>learn explicitly what they do know</b>.&nbsp; Sometimes an audience may generalize about an area of expertise, which can give you a false sense of security while explaining a concept.&nbsp; <b>Intersperse your explanation with confirmations of familiarity</b>.&nbsp; Reassure them that there’s nothing wrong with only being familiar with a portion of a topic and not everything.</div><div class="MsoNormal" style="text-align: justify;"><o:p></o:p></div><div class="MsoNormal" style="text-align: justify;"><br /></div><div class="MsoNormal" style="text-align: justify;">In a <a href="http://www.ted.com/talks/salman_khan_let_s_use_video_to_reinvent_education.html">presentation about “Khan Academy”</a>, a web site with thousands of free online lectures, Salman Khan talks about the student analysis tools it.<span style="mso-spacerun: yes;">&nbsp; </span>They allow, among other things, a teacher to track the time a student spens on each problem throughout a homework assignment.<span style="mso-spacerun: yes;">&nbsp; </span>What they found was that seemingly slower students, when given assistance with a particular problem they were “stuck on”, would often catch up or even exceed the other students once they were given the necessary explanation they needed to surmount the obstacle.<o:p></o:p></div><div class="MsoNormal" style="text-align: justify;"><br /></div><div class="MsoNormal" style="text-align: justify;">This demonstrates the importance of not “skipping” elements of an explanation.<span style="mso-spacerun: yes;">&nbsp; </span><b style="mso-bidi-font-weight: normal;">Explanations are naturally constructed in a hierarchy of understanding.</b><span style="mso-spacerun: yes;">&nbsp; </span>There is a set of fundamentals one must understand in order to master more advanced intermediate concepts required for them to comprehend your explanation.<span style="mso-spacerun: yes;">&nbsp; </span>The two sides to this are:<o:p></o:p></div><div class="MsoNormal" style="text-align: justify;"><span style="text-indent: -0.25in;"><br /></span><br /><ul><li><span style="text-indent: -0.25in;">Without explaining the hierarchy of prerequisite learning in its entirety, they cannot fully understand your explanation.</span></li><li><span style="text-indent: -0.25in;">The effort to immediately address points of confusion is worthwhile.</span></li></ul></div><div class="MsoListParagraphCxSpLast" style="text-align: justify; text-indent: -0.25in;"><o:p></o:p></div><div class="MsoNormal" style="text-align: justify;"><br /></div><h3><b style="mso-bidi-font-weight: normal;">Other suggestions for successful explanation</b></h3><div class="MsoNormal" style="text-align: justify;"><br /></div><div class="MsoNormal" style="text-align: justify;">There are other common mistakes I find impedes the successful transference of information:</div><div class="MsoNormal" style="text-align: justify;"><o:p></o:p></div><div class="MsoNormal" style="text-align: justify;"><br /></div><div><ul><li><b>Hearing is not automatic. </b>&nbsp;Often communication takes place in an environment afflicted with noise pollution from chatting coworkers, street noises, or even an air conditioner. &nbsp;Auditory capability varies between each and every person. &nbsp;If the listener fails to hear an important detail, it is up to you to accommodate. &nbsp;You will have an opportunity to refine your initial statement, but you should not diverge very far. &nbsp;Otherwise, the listener may not recognize the second utterance as repetition and will be concerned about missing information.</li><li><b>Interactivity ensures understanding. </b>&nbsp;You can better ensure comprehension by querying for opinions and predictions relevant to the subject matter. &nbsp;Unexpected inquiries should be welcomed, as this tests and possibly expands your own understanding of the topic, whether through logical exploration, or future investigation.</li><li><b>Recognize learning is hard. </b>&nbsp;Never assume transference of information will be trivial. &nbsp;It is very easy for a person to nod their head, assuming, perhaps rightfully, that they understand “enough”, or are somehow distracted and are trying to be polite. &nbsp;Pride may be also a factor. &nbsp;With modern education largely consisting of a lecture format, where minds silently attempt to track and accept a continuous inflow of facts and logic unquestioningly, the ability to do so reflects one’s supposed intelligence and ultimately one’s status. &nbsp;Minds are trained to attempt this style of learning as much as possible, and fear the inability to do so. &nbsp;This has no place in any realistic approach to the human mind, let alone a simple conversation. &nbsp;Set the listener at ease in this regard by encouraging questions, pausing to proactively confirm understanding, and perhaps even openly acknowledging complexity.</li><li><b>Allow time for critical thinking.</b> &nbsp;Most minds cannot multitask well, if not at all. &nbsp;Studies such as this one at UCLA suggest multitasking hinders learning. &nbsp;That means if the listener is questioning, or extrapolating from anything you say, there is an increased likelihood of reduced comprehension. &nbsp;Recognize this, and allow time for cogitation. &nbsp;Be attentive of facial expression and body language, and the complexity or controversial nature of what you are saying, then use your intuition to know when to continue. &nbsp;Again, suggesting likely questions proactively will be of benefit, as often the listener will be inclined to not impose an interruption.</li><li><b>Prioritize information. </b>&nbsp;If there are time restrictions for transference of information, certainly prioritize on what’s important. &nbsp;Also, however, realize the minimal subset of information that will be valuable to the listener. &nbsp;Balance the benefits of a cursory understanding of the entire subject matter with a complete understanding of an independently valuable portion of it.</li><li><b>Validate sources. </b>&nbsp;It is sub-optimal and often ineffective to refer people to sources of information that you have not personally examined.</li><li><b>Provide reference material. </b>&nbsp;After your initial explanation, while verbal communication with Q&amp;A may be the most effective way to provide an introductory explanation to a potentially complex subject, you should never assume complete transmission of knowledge. &nbsp;The target audience may very well not even recognize incomplete understanding and should have material to refer to, to fill in the gaps as they present themselves.</li></ul></div><div></div><h3><b style="mso-bidi-font-weight: normal;">Conclusion</b></h3><div class="MsoNormal" style="text-align: justify;"><br /></div><div class="MsoNormal" style="text-align: justify;">Knowledge sharing is at the core of much of our professional and personal encounters.&nbsp; People possess various degrees of background knowledge, experiences, and cognitive abilities, and there are many potential impediments to understanding each and every bit of information.&nbsp; Aside from attentiveness of the learner, the responsibility for successful transmission of information lies wholly with the one initially in possession of it.&nbsp; By attempting to explain anything to anyone, you are engaging in a task that has potential benefit, but that also may result in disinterest in your subject matter, discouragement, or at the very least, a waste of time.&nbsp; This may further evolve into a generalization of the target’s impression of interactions with you, and it is thus of social benefit for the transmissions to be frequently successful.&nbsp; By consciously expending energy to practice empathy and non-assumption, articulating required background knowledge for their intended audience, one may greatly improve the quality of their interaction with others who have entrusted you with their time, attention, and perhaps curiosity.</div><div class="MsoNormal" style="text-align: justify;"><o:p></o:p></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Git Along with a Sensible Git Workflow]]></title>
    <link href="http://sdanzig.github.io/blog/2013/07/07/introduction-to-git-along-with-sensible/"/>
    <updated>2013-07-07T00:00:00-04:00</updated>
    <id>http://sdanzig.github.io/blog/2013/07/07/introduction-to-git-along-with-sensible</id>
    <content type="html"><![CDATA[<div class='post'>
<style>.post-body img, .post-body .tr-caption-container, .ss, .Profile img, .Image img, .BlogList .item-thumbnail img {   padding: none !important;   border: none !important;   background: none !important;   -moz-box-shadow: 0px 0px 0px transparent !important;   -webkit-box-shadow: 0px 0px 0px transparent !important;   box-shadow: 0px 0px 0px transparent !important; } </style> <br /><span style="font-size: x-small;"><i>An initial note: &nbsp;I learned about Git initially with the book&nbsp;<a href="http://git-scm.com/book">Pro Git</a>&nbsp;which I&#8217;m amazed is freely available online, so if you want a more comprehensive overview, check that out.<br /><br />Also, I&#8217;d like to amend this post by saying, for change/commit descriptions, it&#8217;s best practice to use the imperative style. (e.g. &#8220;Add file A&#8221;, rather than &#8220;Added file A&#8221;). It&#8217;s too late for me to update all these screenshots.</i></span><br /><div><br /><h3>Table of Contents</h3></div><div><a href="#what-is-a-version-control-system">What is a Version Control System?</a></div><div><a href="#overview-of-this-article">Overview of This Article</a></div><div><a href="#key-benefits-of-git">Key Benefits of Git</a></div><div><ul><li><a href="#other-notable-features">Other Notable Features</a></li></ul></div><div><a href="#tutorial">Tutorial</a></div><div><ul><li><a href="#setup">Setup</a></li><li><a href="#clone-a-repository">Clone a Repository</a></li><li><a href="#folder-structure">Folder Structure</a></li><li><a href="#git-log">git log</a></li><li><a href="#the-gitignore-file-and-git-status">The .gitignore File, and &#8220;git status&#8221;</a></li><li><a href="#staging-changes-you-want-to-commit">Staging Changes You Want to Commit</a></li><li><a href="#committing-changes-to-your-repository">Committing Changes to Your Repository</a></li><li><a href="#the-origin">The Origin</a></li><li><a href="#branches">Branches</a></li><li><a href="#pushing-to-the-remote-repository">Pushing to the Remote Repository</a></li><li><a href="#pulling-changes-from-the-remote-repository">Pulling Changes from the Remote Repository</a></li><li><a href="#merges-and-conflicts">Merges and Conflicts</a></li><li><a href="#rebasing">Rebasing</a></li><li><a href="#pull-requests">Pull Requests</a></li></ul></div><div><a href="#new-york-magazine-development-environment">New York Magazine Development Environment</a><br /><a href="#my-preferred-workflow-with-git">My Preferred Workflow with Git</a></div><div><ul><li><a href="#changing-the-code">Changing the Code</a></li><li><a href="#submitting-to-qa">Submitting to QA</a></li><li><a href="#the-project-maintainer">The Project Maintainer</a></li><li><a href="#release-day">Release Day</a></li><li><a href="#whats-not-set-in-stone">What&#8217;s Not Set in Stone</a></li></ul><a href="#conclusion">Conclusion</a></div><div><br /></div><br /><h3 id="what-is-a-version-control-system">What is a Version Control System?</h3><br />A version control system allows you to store different versions of your code as you make changes. &nbsp;This allows you to avoid losing your changes, and access your code from a convenient location on the internet. &nbsp;You can keep some changes separate in its own branch, and merge those changes into the master branch when you&#8217;re ready, so the main version of your code is unaffected until you know your changes function properly. &nbsp;In case you&#8217;re unfamiliar with the term &#8220;branch&#8221;, picture it as a particular version of your entire project. &nbsp;Let&#8217;s say you&#8217;re working on a book, and you have a published version, and a &#8220;work in progress&#8221; version. &nbsp;You are rewriting a chapter of your book in the &#8220;work in progress&#8221; section, but you still have the published version separate, so if you want to print out a copy of your book without the partially modified chapter, you can. &nbsp;When you&#8217;re done modifying that chapter, you can merge in your changes to the published version, deleting the modification branch afterward. &nbsp;You could also have a permanent &#8220;student edition&#8221; branch that has more detail, and perhaps exercises at the end of each chapter. &nbsp;You can easily merge the same changes into that branch to keep it up to date, but maintain a separate copy.<br /><br /><h3><span id="overview-of-this-article"></span>Overview of This Article</h3><br />I haven&#8217;t been particularly inspired by any version control system until I dove into Git, created by the founder of Linux, Linus Torvalds. &nbsp;If you&#8217;re already familiar with Git, feel free to skip the tutorial sections. &nbsp;I&#8217;m going to go over the following:<br /><br /><ul><li>Summarize what sets Git apart from other alternatives</li><li>The basics of Git, so someone new to Git can be productive with it</li><li>How it&#8217;s set up at New York Magazine, where I work</li><li>My preferred workflow using Git</li></ul><br /><h3><span id="key-benefits-of-git"></span>Key Benefits of Git</h3><br /><ul><li>When you create a new branch, Git doesn&#8217;t copy all your files over. &nbsp;A branch will point to the original files and only track the changes (commits) specific to that branch. &nbsp;This makes it blazingly fast, as opposed to its main competitor in terms of marketshare, Subversion, which actually laboriously copies the files.</li><li>Git lets you work on your own copy of a project, merging your commits into the central repository, often on github.com, when you want your commits to be available to others. &nbsp;Github.com, by the way, will host your project, for free as long as it&#8217;s open source. &nbsp;This means you can reliably access your code from anywhere with an internet connection. &nbsp;If you lose that internet connection, you can continue to work locally and sync up your changes when you&#8217;re able to reconnect.</li><li>When you screw up, you can usually undo your changes, somehow. &nbsp;You might need to call in an expert in serious cases, but there&#8217;s always hope. &nbsp;This is the best &#8220;key benefit&#8221; a version control system can have.</li><li>Git also lets you keep your commit history very organized. &nbsp;If you have lots of little changes, it lets you easily rewrite history so you see it as one big change (via something called rebasing). &nbsp;You can add/remove files in each commit, and certainly change the descriptions of each. &nbsp;This definitely forces me to consciously repress OCD tendencies.</li><li>It&#8217;s open source, fast, and very flexible, so it&#8217;s widely-adopted and therefore well-supported.</li></ul><br /><div><br /></div><div><h4><span id="other-notable-features"></span>Other Notable Features</h4></div><div><br /></div><div><ul><li>With Git, you can create &#8220;hooks&#8221;, which let things happen automatically when you work with your code. &nbsp;A common usage is to create a hook to check the description submitted with each commit, making sure it conforms to a particular format. &nbsp;Perhaps you have your bugs described in a bug tracking system and each bug has an ID #. &nbsp;Git can ensure each message has &#8220;Bug: SomeNumber&#8221;.</li><li>Another&nbsp;under-appreciated&nbsp;feature is how Git tracks files. &nbsp;It uses an algorithm called SHA-1 to take the contents of files and produce a large hexadecimal number (hash code). &nbsp;The same file will always produce the same hash code. &nbsp;This way, if you move a file to a different folder, it can detect that the file moved, and not think that you deleted one file and added another. &nbsp;This allows Git to not have to keep two copies of the same file.</li><li>While Git is not necessarily the most intuitive version control system out there, once you get used to it, you&#8217;re able to browse through its internal directories and it all makes complete sense. &nbsp;Wondering where the file with the hash code &#8220;d482acb1302c49af36d5dabe0bccea04546496f7&#8221; is? &nbsp;Check out this file: &nbsp;&#8221;&lt;your project&gt;/.git/objects/d4/82acb1302c49af36d5dabe0bccea04546496f7&#8221; &nbsp;See how where the file is stored is determined by the hash code? &nbsp;There are lots of lower-level commands that let you build the operations you want, in case, for instance, git&#8217;s merge command doesn&#8217;t work how you&#8217;d like it to.</li></ul></div><div><br /></div><div><h3><span id="tutorial"></span>Tutorial</h3><br />So you&#8217;re, in whatever programming language, going to start a new project, and you want to use version control? &nbsp;I&#8217;m going to just create a silly, sample application in Scala that&#8217;s very easy to understand, to demonstrate. &nbsp;I&#8217;m going to assume you&#8217;re familiar with your operating system&#8217;s command-line interface, and that you&#8217;re able to write something in the language of your choice.<br /><br /><h4><span id="setup"></span>Setup</h4><br />Github is one of the go-to places to get your code hosted for free. &nbsp;It gives you a home for your code, that you can access from anywhere. &nbsp;Initial steps:<br /><br /><ol><li>Go to http://github.com and &#8220;Sign up for Github&#8221;</li><li>You&#8217;ll need Git. &nbsp;Follow this page step by step: &nbsp;http://help.github.com/articles/set-up-git</li><li>This explains how to create a new repository: &nbsp;https://help.github.com/articles/create-a-repo</li><li>Lastly, you&#8217;re going to want to get used to viewing files that start with a &#8220;.&#8221; &nbsp;These files are hidden by default, so at the command line, when you&#8217;re listing contents of a directory, you need to include an &#8220;a&#8221; option. &nbsp;That&#8217;s &#8220;ls -a&#8221; in OSX and Linux, and &#8220;dir /a&#8221; for Windows. &nbsp;In your folder options, you can turn on &#8220;Show hidden files and folders&#8221; as well.</li></ol><br />Once you got that far, there&#8217;s nothing stopping you, outside of setting aside some play time, from using everything git has to offer.<br /><br /><h4><span id="clone-a-repository"></span>Clone a Repository</h4><br />Cloning a repository lets you grab the source code from an existing project that you own, or someone else&#8217;s project that you have access to (usually public). &nbsp;Unless it&#8217;s your project, you won&#8217;t be able to make changes, so you&#8217;re going to &#8220;fork&#8221; my potayto project, which means to create your own copy of it under your own account, then you can modify that to your heart&#8217;s content. &nbsp;I keep all of my projects locally (on my computer) in a &#8220;projects&#8221; folder in my home directory, &#8220;/Users/sdanzig/projects&#8221;, so I&#8217;m going to use &#8220;projects&#8221; for this demo.<br /><br />First, fork my repository&#8230;<br /><br />I created a sample project on github, as you now should know how to do. <br /><br /><div style="text-align: left;"></div>Let&#8217;s get this project onto your hard drive, so you can add comments to my source code for me!<br /><br />First, log into your github account, then go to my repository at&nbsp;https://github.com/sdanzig/potayto &nbsp;&#8230; Click &#8220;Fork&#8221;:<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-oyjDU8E8zuc/UdcXi1mcgLI/AAAAAAAACM8/f0wyCmDHGJk/s1600/fork_repo.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="332" src="http://4.bp.blogspot.com/-oyjDU8E8zuc/UdcXi1mcgLI/AAAAAAAACM8/f0wyCmDHGJk/s640/fork_repo.jpg" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 1</td></tr></tbody></table><br />Then select your user account, to copy it to. &nbsp;At this point, it&#8217;s as though it were your own repository, and you can actually make changes in the code on github. &nbsp;We&#8217;re going to copy the repository onto our local hard drive, so we can both edit and compile the code there.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-Umank7K0BVM/UdcdgXAI1kI/AAAAAAAACNM/1ducWTeY1NY/s1600/clone_repo.tiff" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://4.bp.blogspot.com/-Umank7K0BVM/UdcdgXAI1kI/AAAAAAAACNM/1ducWTeY1NY/s1600/clone_repo.tiff" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 2</td></tr></tbody></table><br /><h4><span id="folder-structure"></span>Folder structure</h4>There are a few key things to know about what git is doing with your files. &nbsp;Type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">cd potayto</span></blockquote>There are a couple things to see here. &nbsp;List the contents in the potayto folder, being careful to show the hidden files and folders:<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/--c_IrW5WmaU/Udcx2_1OZjI/AAAAAAAACNc/zgsExmHzFoE/s1600/list_folder.tiff" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://4.bp.blogspot.com/--c_IrW5WmaU/Udcx2_1OZjI/AAAAAAAACNc/zgsExmHzFoE/s1600/list_folder.tiff" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 3</td></tr></tbody></table><br />The src folder has the source code, and its structure conforms to the&nbsp;<a href="http://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html">Maven standard directory structure</a>. &nbsp;You&#8217;ll also see a .git folder, which contains a complete record of all the changes that were made to the potayto project.the potayto repository and also a .gitignore text file. &nbsp;We&#8217;re not going to dive into the contents of .git in this tutorial, but it&#8217;s easier to understand than you think. &nbsp;If you&#8217;re curious, please refer to the <a href="http://git-scm.com/book">online book I mentioned earlier</a>.<br /><br /><span id="git-log"></span><br /><h4>git log</h4>A &#8220;commit&#8221; is a change recorded in your repository. &nbsp;Type &#8220;git log&#8221;, and you might have to press your space bar to scroll and type &#8220;q&#8221; at the end, to quit displaying the file:<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-CTyANoaQ2WY/UddMy9ADuNI/AAAAAAAACOU/il4gGjNApno/s1600/git_log.tiff" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/-CTyANoaQ2WY/UddMy9ADuNI/AAAAAAAACOU/il4gGjNApno/s1600/git_log.tiff" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 4</td></tr></tbody></table><br />Git&#8217;s log shows the potayto project has 3 commits so far, from oldest on bottom, the first commit, to most recent on top. &nbsp;You see the big hexadecimal numbers preceded by the word &#8220;commit&#8221;? &nbsp;Those are the SHA codes I was referring to. &nbsp;Git also uses these SHA codes to identify commits. &nbsp;They&#8217;re big and scary, but you can just copy and paste them. &nbsp;Also, you only need to type enough letters and numbers for it to be uniquely identified. &nbsp;Five should be usually enough. &nbsp;For this project, you can get away with 4, the minimum.<br /><br />Let&#8217;s see how my first commit started. &nbsp;To see the details of the first commit, ype:<br /><br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git show bfaa</span></blockquote><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;"></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-K5pLhXsnwtE/UdeB7YMiPCI/AAAAAAAACO0/S1ZqCYDhj9I/s1600/show_first_commit.tiff" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://1.bp.blogspot.com/-K5pLhXsnwtE/UdeB7YMiPCI/AAAAAAAACO0/S1ZqCYDhj9I/s1600/show_first_commit.tiff" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 5</td></tr></tbody></table><br />Initially I checked in my Scala application as something that merely printed out &#8220;Tomayto tomahto,&#8221; &#8220;Potayto potahto!&#8221; &nbsp;You can see that near the bottom. &nbsp;The &#8220;main&#8221; method of the &#8220;Potayto&#8221; object gets executed, and there are those two &#8220;print lines&#8221;. &nbsp;Earlier in the commit you can see the addition of the .gitignore I provided. &nbsp;I&#8217;m making git ignore my Eclipse-specific dot-something files (e.g. .project) and also the target directory, where my source code get compiled to. &nbsp;Git&#8217;s show command is showing the changes in the file, not the entire files. &nbsp;Those +&#8217;s before each line mean the lines were added. &nbsp;In this case, they were added because the file was previously non-existant. &nbsp;That&#8217;s why you see the /dev/null there.<br /><br />Now type:<br /><br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git show 963e</span></blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-Up2NjEISAQ0/UdeE7eeiX6I/AAAAAAAACPE/aMgu_uBr-Ak/s1600/show_second_commit.tiff" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/-Up2NjEISAQ0/UdeE7eeiX6I/AAAAAAAACPE/aMgu_uBr-Ak/s1600/show_second_commit.tiff" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 6</td></tr></tbody></table><br />Here you see my informative commit message about what changed, which should be concise but comprehensive, so you&#8217;re able to find the change when you need it. &nbsp;After that, you see that I did exactly what the message says. &nbsp;I changed the order of the lyrics. &nbsp;You see two lines beginning with &#8220;-&#8220;, preceding the lines removed, and two lines beginning with &#8220;+&#8221;, preceding the lines added. &nbsp;You get the idea.<br /><span id="the-gitignore-file-and-git-status"></span><br /><h4>The .gitignore File, and &#8220;git status&#8221;</h4>View the .gitignore file.<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">.cache</span><br /><span style="font-family: Courier New, Courier, monospace;">.settings</span><br /><span style="font-family: Courier New, Courier, monospace;">.classpath</span><br /><span style="font-family: Courier New, Courier, monospace;">.project</span><br /><span style="font-family: Courier New, Courier, monospace;">target</span><br /></blockquote>This is a manually created file that tells git what to ignore. &nbsp;If you don&#8217;t want files tracked, you include it here. &nbsp;I use software called Eclipse to write my code, and it creates hidden project files which git will see and want to add in to the project. &nbsp;Why should you be confined to using not only the same software as me to mess with my code, but also the same settings? &nbsp;Some teams might want to conform to the same development environments and checking in the project files might be a time saver, but these days there are tools that let you easily generate such project files for popular IDEs. &nbsp;Therefore, I have git ignore all the eclipse-specific files, which all happen to start with a &#8220;.&#8221;<br /><br />There&#8217;s also a &#8220;target&#8221; folder. &nbsp;I&#8217;ve configured Eclipse to write my compiled code into that folder. &nbsp;We don&#8217;t want git tracking the files generated upon compilation. &nbsp;Let those grabbing your source code compile it themselves after they make what modifications they wish. &nbsp;You&#8217;re going to want to create one for your own &nbsp;projects. &nbsp;This .gitignore file gets checked in along with your project, so people who modify your code don&#8217;t accidentally check in their generated code as well. &nbsp;Others might be using Intellij, which writes .idea folders and .ipr and .iws files, so they may append this to the .gitignore, which is completely fine.<br /><br />Let&#8217;s try this. &nbsp;Type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git status</span></blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-LeGJu8Vs2H8/Udc02oIosNI/AAAAAAAACNs/g3KmVTbfccw/s1600/first_git_status.tiff" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://4.bp.blogspot.com/-LeGJu8Vs2H8/Udc02oIosNI/AAAAAAAACNs/g3KmVTbfccw/s1600/first_git_status.tiff" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 7</td></tr></tbody></table><br />You&#8217;ll see you&#8217;re on the main branch of your project (a version of your code), &#8220;master&#8221;. &nbsp;Being &#8220;on a branch&#8221; means your commits are appended to that branch. &nbsp;Now create a text file named &#8220;deleteme.txt&#8221; using whatever editor you want in that potayto folder and type &#8220;git status&#8221; again:<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-rChp38Fcntc/Udc3X1v_AEI/AAAAAAAACN8/6eWdY0jqhDo/s1600/deleteme.tiff" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://3.bp.blogspot.com/-rChp38Fcntc/Udc3X1v_AEI/AAAAAAAACN8/6eWdY0jqhDo/s1600/deleteme.tiff" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 8</td></tr></tbody></table><br />Use that same text editor to add &#8220;deleteme.txt&#8221; as the last line of .gitignore and check this out:<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-IC-dqJwh3bk/Udc4G6lu2JI/AAAAAAAACOE/SsR57dhdMV4/s1600/deleteme_removed.tiff" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://1.bp.blogspot.com/-IC-dqJwh3bk/Udc4G6lu2JI/AAAAAAAACOE/SsR57dhdMV4/s1600/deleteme_removed.tiff" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 9</td></tr></tbody></table><br />See, you modified .gitignore, so git doesn&#8217;t see your deleteme.txt file. &nbsp;However, other than this nifty feature, .gitignore is a file just like any other file in your repository, so if you want this &#8220;ignoring&#8221; saved, you have to commit the change, just like you would commit a change to your code.<br /><br /><span id="staging-changes-you-want-to-commit"></span><br /><h4>Staging Changes You Want to Commit</h4><br />Here&#8217;s one of the fun things with git. &nbsp;You can &#8220;stage&#8221; the modified files that you want to commit. &nbsp;Other version control systems ominously await your one command before your files instantly changed in the repository, perhaps the remote repository for the entire team.<br /><br />Let&#8217;s say you wanted to make a change involving files A and B. &nbsp;You changed file A. &nbsp;You then remembered something you&#8217;d like to do with file Z, on an unrelated note, and modified that before you forgot about it. &nbsp;Then you completed your initial change, modifying file B. &nbsp;Git allows you to &#8220;add&#8221; files A and B to staging, while leaving file Z &#8220;unstaged&#8221;. &nbsp;Then you can &#8220;commit&#8221; only the staged files to your repository. &nbsp;But you don&#8217;t! &nbsp;You realize you need to make a change to file C as well. &nbsp;You &#8220;add&#8221; it. &nbsp;Now files A, B, and C are staged, and Z is still unstaged. &nbsp;You commit the staged changes only.<br /><br />Read that last paragraph repeatedly if you didn&#8217;t follow it fully. &nbsp;It&#8217;s important. &nbsp;See how Git lets you prepare your commit beforehand? &nbsp;With a version control system such as Subversion, you&#8217;d have to remember to make your change to file Z later, and your &#8220;commit history&#8221; would show that you changed files A and B, then, in another entry, that you changed file C later.<br /><br />We won&#8217;t be as intricate. &nbsp;Let&#8217;s just stage our one file for now. &nbsp;Look at Figure 9. &nbsp;Git gives you instructions for what you can do while in the repository&#8217;s current state. &nbsp;Git is not known for having intuitive commands, but it <b>is</b> known for helping you out. &nbsp;&#8220;git checkout &#8211; .gitignore&#8221; to undo your change? &nbsp;It&#8217;s strange, but at least it tells you exactly what to do.<br /><br />To promote .gitignore to &#8220;staged&#8221; status, type<br /><br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git add .gitignore</span></blockquote><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-5d82j-szPl0/UdeRg0gREOI/AAAAAAAACPU/NhWo1yZkoFs/s1600/staged_file.tiff" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/-5d82j-szPl0/UdeRg0gREOI/AAAAAAAACPU/NhWo1yZkoFs/s1600/staged_file.tiff" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 10</td></tr></tbody></table><br />The important thing to note here is that now your file change is listed under &#8220;Changes to be committed&#8221; and git is spoon-feeding you what exactly you need to type if you want to undo this staging. &nbsp;Don&#8217;t type this:<br /><br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git reset HEAD .gitignore</span></blockquote>You should strive to understand what&#8217;s going on there (check out the Pro Git book I linked to for those details) but for now, in this situation, you just are given means to an end when you might need it (changing your mind about what to stage).<br /><br />By the way, it&#8217;s often more convenient to just type &#8221;<span style="font-family: Courier New, Courier, monospace;">git add &lt;folder name&gt;</span>&#8221; to add all modifications of files in a folder (and subfolders of that folder). &nbsp;Also very common to type is &#8221;<span style="font-family: Courier New, Courier, monospace;">git add .</span>&#8221;, a shortcut to stage all the modified files in your repository. &nbsp;This is fine as long as you&#8217;re sure you&#8217;re not accidentally adding a file such as Z that you don&#8217;t want to be grouped into this change in your commit history.<br /><br /><i><span style="font-size: x-small;">It&#8217;s also useful to know how to stage the deletion of a file. &nbsp;Use &#8220;git rm &lt;file&gt;&#8221; for that.</span></i><br /><br /><span id="committing-changes-to-your-repository"></span><br /><h4>Committing Changes to Your Repository</h4><br />Guess what? &nbsp;We get to do our first commit! &nbsp;Time to make that .gitignore change official. &nbsp;Type:<br /><br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git commit -m &#8220;Added deleteme.txt to .gitignore&#8221;</span></blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-xoGheNpaLAs/UdeXmnhDO1I/AAAAAAAACPk/LEujMur9W2c/s1600/make_first_commit.tiff" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://1.bp.blogspot.com/-xoGheNpaLAs/UdeXmnhDO1I/AAAAAAAACPk/LEujMur9W2c/s1600/make_first_commit.tiff" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 11</td></tr></tbody></table><br />You could just type &#8220;git commit&#8221;, but then git would load up a text editor, and you&#8217;d be required to type a commit message anyway. &nbsp;In OSX and Linux, &#8220;vim&#8221; would load up, and in Windows, you&#8217;d get an error. &nbsp;If you prefer a full screen editor in Windows, you can type this to configure it:<br /><br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git config &#8211;global core.editor &#8220;notepad&#8221;</span></blockquote><br /><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: right; margin-left: 1em; text-align: right;"><tbody><tr><td style="text-align: center;"><a href="http://nostarch.com/sites/default/files/imagecache/product_full/mug_vi.jpg" imageanchor="1" style="clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;"><img border="0" height="200" src="http://nostarch.com/sites/default/files/imagecache/product_full/mug_vi.jpg" width="198" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Mug available on thinkgeek.com<br />sporting some vi quick reference.<br />Vim supports all vi commands listed.</td></tr></tbody></table>If you end up in vim and are unfamiliar with it, realize it&#8217;s a very geeky and unintuitive but powerful editor to use. &nbsp;In general, pressing the escape key, and typing &#8220;:x&#8221; will save what you&#8217;re writing and then exit. &nbsp;The same syntax will work to choose a new full screen editor in OSX and Linux, of course replacing notepad with the /full/path/and/filename of a different editor.<br /><br />The full screen editor is necessary if you want a commit message with multiple lines, or in other situations, so if you hate vim, configure git to one you do like.<br /><br />Enough with this babble. &nbsp;Fill that VI mug with champagne &#8211; you just made your first commit! &nbsp;If you can contain your excitement, type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git log</span></blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-dKeAGdNnZKM/UdeaE_lxbSI/AAAAAAAACP0/tiXR-AVoSvQ/s1600/git_log_with_commit.tiff" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://4.bp.blogspot.com/-dKeAGdNnZKM/UdeaE_lxbSI/AAAAAAAACP0/tiXR-AVoSvQ/s1600/git_log_with_commit.tiff" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 12</td></tr></tbody></table>The change on top is yours. &nbsp;Oh, what the heck, let&#8217;s take a look at it:<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-T9B6aeqkoGo/UdfAEG-BujI/AAAAAAAACQE/ezkm_6zGG8U/s1600/git_show_new_change.tiff" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/-T9B6aeqkoGo/UdfAEG-BujI/AAAAAAAACQE/ezkm_6zGG8U/s1600/git_show_new_change.tiff" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 13</td></tr></tbody></table><br />See the +deleteme.txt there? &nbsp;That was you! &nbsp;The way this &#8220;diff&#8221; works is that git tries to show you three lines before and after each of your changes. &nbsp;Here, there were no lines below your addition. The -3,3 and +3,4 are ranges. &nbsp;- precedes the old file&#8217;s range, and + is for the new file. &nbsp;The first number in each range is a starting line number. &nbsp;The second number is the number of lines of the displayed sample before and after your modification. &nbsp;The 4 lines displayed only totaled 3 before your change.<br /><br /><span style="font-size: x-small;"><i>If you want to revert changes you made, the safest way is to use &#8220;git revert&#8221;, which automatically creates a new commit that undoes the changes in another commit. &nbsp;Don&#8217;t do this, but if you wanted to undo that &#8220;deleteme.txt ignoring&#8221; commit which has the SHA starting with 0c22, you can type: &#8220;git revert 0c22&#8221;</i></span><br /><span id="the-origin"></span><br /><h4>The Origin</h4><br />You cloned your repository from your github account. &nbsp;Unless something went horribly wrong, this should be:<br /><br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">https://github.com/&lt;your github username&gt;/potayto.git</span></blockquote>Git automatically labels where you cloned a repository from as &#8220;origin&#8221;. &nbsp;Remember when I said the internals of a git repository were easily accessible in that .git folder in your project? &nbsp;Look at the text file .git/config:<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-28uUud2GVJk/Udg9OfKkubI/AAAAAAAACQU/tphwBdve8Hs/s1600/git_config.tiff" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/-28uUud2GVJk/Udg9OfKkubI/AAAAAAAACQU/tphwBdve8Hs/s1600/git_config.tiff" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 14</td></tr></tbody></table><br />It&#8217;s as simple as this. <br /><br /><span id="branches"></span><br /><h4>Branches</h4><br />Before I explain how to make your changes on the version of your code stored on github, I should first explain more about branches. &nbsp;I already explained how a branch is a separate version of your code. &nbsp;A change made to one branch does not affect the version of your repository represented by the other branch, unless you explicitly merge the change into it. &nbsp;By default, git will put your code on a &#8220;master&#8221; branch. &nbsp;When you clone a project from a remote repository (remote in this case means hosted by github), it will automatically create a local branch that &#8220;tracks&#8221; a remote branch. &nbsp;Tracking a branch means that git will help you easily determine:<br /><br /><ul><li>See the differences between commits made to the tracking branch (the local one) and the tracked branch (remote)</li><li>Add your new local commits to the remote branch</li><li>Put the new remote commits on your local branch</li></ul><br />If you didn&#8217;t have your local branch track the remote branch, you could still move changes from one to another, but it becomes more of a manual process. &nbsp;Hey, guess what? &nbsp;I can easily demonstrate all this in action! &nbsp;First, type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git status</span></blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-3ege6kBKSEA/UdhLHpCsbRI/AAAAAAAACQk/6WzH1n1HS1U/s1600/status_with_local_change.tiff" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://1.bp.blogspot.com/-3ege6kBKSEA/UdhLHpCsbRI/AAAAAAAACQk/6WzH1n1HS1U/s1600/status_with_local_change.tiff" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 15</td></tr></tbody></table><br />That deleteme.txt ignoring change you made in your local master branch is not yet on Github! &nbsp;You have one commit that Github&#8217;s (the origin) remote master branch (denoted as origin/master) does not yet have.<br /><br /><i><span style="font-size: x-small;">Don&#8217;t do this now, but if you don&#8217;t want to make changes directly in your local master branch, you can create a new local branch, perhaps named &#8220;testing&#8221; by typing &#8220;git branch testing&#8221;. &nbsp;Then you can switch to that branch by typing &#8220;git checkout testing&#8221;. &nbsp;Then make whatever changes you want, stage and commit them, then switch back to the master branch with &#8220;git checkout master&#8221;. &nbsp;You could also create and switch to a new local branch in one command, &#8220;git checkout -b testing&#8221;.</span></i><br /><span id="pushing-to-the-remote-repository"></span><br /><h4>Pushing to the Remote Repository</h4><br />Let&#8217;s put your change on Github, then we&#8217;ll make a change directly on Github and pull it. &nbsp;Git&#8217;s push command, if you don&#8217;t provide arguments, will just push all the changes in your local branches to the remote branches they track. &nbsp;This can be dangerous, if you have commits in another local branch and you&#8217;re not quite ready to push those out also. &nbsp;(I one time accidentally erased the last week of changes in New York Magazine&#8217;s main repository doing this. &nbsp;We did manage to recover them, but, don&#8217;t ask.) &nbsp;It&#8217;s better to be explicit. &nbsp;Type:<br /><br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git push origin master</span></blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-tb9Gsi5BpAs/UdhPzn0SGEI/AAAAAAAACQ0/Ff3L2NeBr14/s1600/git_push.tiff" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://1.bp.blogspot.com/-tb9Gsi5BpAs/UdhPzn0SGEI/AAAAAAAACQ0/Ff3L2NeBr14/s1600/git_push.tiff" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 16</td></tr></tbody></table><br />You don&#8217;t really need to concern yourself with the details of how Git does the upload. &nbsp;But as for the command you just typed, git push lets you specify the &#8220;remote&#8221; that you&#8217;re pushing to, and the branch. &nbsp;By specifying the branch, you tell git to take that particular branch (&#8220;master&#8221;, in this case) and update the remote branch, on the origin (your Github potayto repository), with the same name (it will create a new remote &#8220;master&#8221; branch if it doesn&#8217;t exist). &nbsp;If you didn&#8217;t specify &#8220;master&#8221;, it will try to push the changes in all your branches to branches of the same names on the origin (if they exist there. &nbsp;It won&#8217;t create new remote branches in this case).<br /><br />Anyway, if you type &#8220;git status&#8221; again, you&#8217;ll see your branch now matches the remote repository&#8217;s copy of it. &nbsp;I&#8217;d show you, but I can only do so many screen captures, okay? &nbsp;Also what you can do is type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git log origin/master</span></blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-wI7M9g94Sns/UdhYof5_50I/AAAAAAAACRE/1KDPhNEqo9o/s1600/git_remote_log.tiff" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/-wI7M9g94Sns/UdhYof5_50I/AAAAAAAACRE/1KDPhNEqo9o/s1600/git_remote_log.tiff" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 17</td></tr></tbody></table><br />This is the syntax to see a log of the commits in the master branch on your &#8220;origin&#8221; remote. &nbsp;You can see the change is there. &nbsp;You can also see this list of commits by logging into Github, viewing your Potayto repository, and clicking on this link:<br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-S_cHhVyDruk/UdhboTc5y9I/AAAAAAAACRU/TU2h36sfAfk/s1600/commit_history_link.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="363" src="http://4.bp.blogspot.com/-S_cHhVyDruk/UdhboTc5y9I/AAAAAAAACRU/TU2h36sfAfk/s400/commit_history_link.jpg" width="400" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 18</td></tr></tbody></table><span id="pulling-changes-from-the-remote-repository"></span><br /><h4>Pulling Changes from the Remote Repository</h4><br />While we&#8217;re browsing the Github interface, let&#8217;s use it to create a change that you can fetch (or pull). &nbsp;This will emulate someone else accessing the remote repository and making a change. &nbsp;If you want your local copy of the repository to reflect what&#8217;s stored in the remote repository, you need to keep yours up to date by intermittently fetching new changes. &nbsp;First, let&#8217;s create a README.md file which Github will automatically use to describe your project. &nbsp;Github provides a button labeled &#8220;Add a README&#8221; for this, but let&#8217;s do it the more generic way. &nbsp;Click the encircled &#8220;Add a file&#8221; button:<br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-XxQmqWGH01M/UdhxflvTl4I/AAAAAAAACRk/oO3egbykKlY/s1600/add_new_file_link.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="362" src="http://2.bp.blogspot.com/-XxQmqWGH01M/UdhxflvTl4I/AAAAAAAACRk/oO3egbykKlY/s400/add_new_file_link.jpg" width="400" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 19</td></tr></tbody></table>Now type &#8220;README.md&#8221; for the name and a description that makes sense to you.<br /><br /><span style="font-size: x-small;"><i>The &#8220;md&#8221; in the filename stands for &#8220;Markdown&#8221;, which is a &#8220;markup language&#8221; that lets you augment your text with different things just like HTML does. &nbsp;If you want to learn how pretty you can make your README file, you can learn more about Markdown&nbsp;<a href="http://daringfireball.net/projects/markdown/basics">here</a>, but just realize Github uses a&nbsp;<a href="https://help.github.com/articles/github-flavored-markdown">slightly modified version of Markdown</a>.</i></span><br /><br />Click the &#8220;Commit New File&#8221; button:<br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-RC19QZiM0ec/Udh3rugVZlI/AAAAAAAACR0/hx3NwMI8eHA/s1600/creating_readme.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="640" src="http://2.bp.blogspot.com/-RC19QZiM0ec/Udh3rugVZlI/AAAAAAAACR0/hx3NwMI8eHA/s640/creating_readme.jpg" width="616" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 20</td></tr></tbody></table>You&#8217;ll see your project described as desired. &nbsp;Go back to your terminal window and type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git status</span></blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-LeGJu8Vs2H8/Udc02oIosNI/AAAAAAAACNw/asMPQVB83kw/s1600/first_git_status.tiff" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://4.bp.blogspot.com/-LeGJu8Vs2H8/Udc02oIosNI/AAAAAAAACNw/asMPQVB83kw/s1600/first_git_status.tiff" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 21</td></tr></tbody></table><br />Wait a sec&#8230; Why&#8217;s it saying that your local branch is up to date? &nbsp;It&#8217;s because the git &#8220;status&#8221; command does not do any network communication. &nbsp;Even typing &#8220;git log origin/master&#8221; won&#8217;t show the change. &nbsp;Only Git&#8217;s &#8220;push&#8221;, &#8220;pull&#8221;, and &#8220;fetch&#8221; does anything over the network. &nbsp;Let&#8217;s talk about &#8220;fetch&#8221;, as &#8220;pull&#8221; is just a shortcut of functionality that &#8220;fetch&#8221; can do.<br /><br />When you track a remote branch, you do get a copy of that remote branch in your local repository. &nbsp;However, aside from those three aforementioned commands that talk over the network, git treats these remote branches just like any other branches. &nbsp;You can even have one local branch track another local branch. &nbsp;(Probably won&#8217;t need to do that.)<br /><br />So, how do we update our local copies of the remote branches? &nbsp;&#8220;git fetch&#8221; will update all the local copies of the remote branches listed in your .git/config file. &nbsp;Here, I&#8217;ll start adding more shadows to my screenshots, in case you actually aren&#8217;t as excited about all this niftiness as I am. &nbsp;Please type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git fetch</span></blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-mUVI5GkB5mM/Udh---HtqfI/AAAAAAAACSE/VOfYi1mQfrY/s1600/Screen+Shot+2013-07-06+at+4.32.09+PM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/-mUVI5GkB5mM/Udh---HtqfI/AAAAAAAACSE/VOfYi1mQfrY/s1600/Screen+Shot+2013-07-06+at+4.32.09+PM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 22</td></tr></tbody></table><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-m9V2IfnpJWA/UdiC2T6a-II/AAAAAAAACSc/0ehVcoKyJ0U/s1600/Screen+Shot+2013-07-06+at+4.44.41+PM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://4.bp.blogspot.com/-m9V2IfnpJWA/UdiC2T6a-II/AAAAAAAACSc/0ehVcoKyJ0U/s1600/Screen+Shot+2013-07-06+at+4.44.41+PM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 23</td></tr></tbody></table>Now, you&#8217;ll notice there&#8217;s still no difference if you type &#8220;git log&#8221;, but let&#8217;s type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git log origin/master</span></blockquote><div class="separator" style="clear: both; text-align: center;"></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-fEztG9Nw8XY/UdiC2Q7-52I/AAAAAAAACSY/Lo0PIR0eYZw/s1600/Screen+Shot+2013-07-06+at+4.48.58+PM.png" imageanchor="1" style="margin-left: auto; margin-right: auto; text-align: center;"><img border="0" src="http://2.bp.blogspot.com/-fEztG9Nw8XY/UdiC2Q7-52I/AAAAAAAACSY/Lo0PIR0eYZw/s1600/Screen+Shot+2013-07-06+at+4.48.58+PM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 24</td></tr></tbody></table>Now you see the remote change. &nbsp;Type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git status</span></blockquote>&nbsp;See, this is more like it, but what does &#8220;fast-forwarded&#8221; mean? &nbsp;Fast-forwarding is a version of &#8220;merging&#8221;. &nbsp;It means there&#8217;s no potential conflict. &nbsp;It means you took all the changes in a branch, such as the remote master branch, and made changes from there, while no new changes were made in the remote branch. &nbsp;I&#8217;ll explain more later, in the section on &#8220;rebasing&#8221;, but for now, we&#8217;re going to pull these changes in. &nbsp;Type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git merge origin/master</span></blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-enl2HZO4-Kc/Udiklq6JkNI/AAAAAAAACSs/0aQRggGW7m8/s1600/Screen+Shot+2013-07-06+at+7.12.53+PM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://4.bp.blogspot.com/-enl2HZO4-Kc/Udiklq6JkNI/AAAAAAAACSs/0aQRggGW7m8/s1600/Screen+Shot+2013-07-06+at+7.12.53+PM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 25</td></tr></tbody></table>This tells you there was one file inserted. &nbsp;Now if you typed &#8220;git log&#8221;, you&#8217;d see that you brought the change first from the master branch on your Github repository to your origin/master branch, and then from there to your local master branch. &nbsp;You could even have absolute proof of the change by looking in your current directory:<br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-rBJJRAMM-Dc/UdjBHUFvp_I/AAAAAAAACTM/4rERA1Ow0Uo/s1600/Screen+Shot+2013-07-06+at+9.14.49+PM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/-rBJJRAMM-Dc/UdjBHUFvp_I/AAAAAAAACTM/4rERA1Ow0Uo/s1600/Screen+Shot+2013-07-06+at+9.14.49+PM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 26</td></tr></tbody></table>See the README.md file? &nbsp;Of course, there is a short cut. &nbsp;It&#8217;s too late, but you could have done everything in one fell swoop by typing:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git pull origin master</span></blockquote>That would have not only fetched the commits from the remote repository, but would also have done the merge. &nbsp;And if you want to pull all of the branches from all the remote repositories that your .git/config file lists, you can just type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git pull</span></blockquote>You can be as trigger happy as you want with that for now, but when you start dealing with more than one branch, you might update some branches you weren&#8217;t yet ready to update.<br /><br /><span id="merges-and-conflicts"></span><br /><h4>Merges and Conflicts</h4><br />Now for the purposes of learning about merges, we&#8217;re going to undo that last merge. &nbsp;Very carefully, type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git reset HEAD~1 &#8211;hard</span></blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-WxBsum_MTkQ/Udi4_L2Z5SI/AAAAAAAACS8/MkghUlqFvfg/s1600/Screen+Shot+2013-07-06+at+8.39.39+PM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/-WxBsum_MTkQ/Udi4_L2Z5SI/AAAAAAAACS8/MkghUlqFvfg/s1600/Screen+Shot+2013-07-06+at+8.39.39+PM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 27</td></tr></tbody></table><span style="font-size: x-small;"><i>The &#8220;HEAD~1&#8221; means &#8220;the 1st commit before the latest commit&#8221;, with the latest commit referred to as the &#8220;HEAD&#8221; of the branch (currently master). &nbsp;By resetting &#8220;hard&#8221;, you&#8217;re actually permanently erasing the last commit from your local master branch. &nbsp;As far as Git&#8217;s concerned, the last link in the master branch&#8217;s &#8220;chain&#8221; now is the commit that was previously second to last. &nbsp;Don&#8217;t get in the habit of this. &nbsp;It&#8217;s just for the purpose of this tutorial.</i></span><br /><br />Don&#8217;t worry &#8211; we don&#8217;t have to mess with remote repositories for a while. &nbsp;Your new README.md file is also safely committed to your local repository&#8217;s cached version of the remote master branch, &#8220;origin/master&#8221;. &nbsp;You <b>could</b> type &#8220;git merge origin/master&#8221; to re-merge your changes, but don&#8217;t do it right now.<br /><br />Let&#8217;s say someone else added that README.md, and you were unaware. &nbsp;You start to create a README.md in &nbsp;your local repository, with the intention of pushing it to the remote repository later. &nbsp; Because we undid our change, there is no longer a README.md file in your current directory.<br />Normally you&#8217;d use a text editor, but for now, type this to create a new README.md file:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">echo A test repository for learning git &gt; README.md</span></blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-ddE5Le_OrAs/UdjCHuNRIkI/AAAAAAAACTY/6ZGReoqZeHg/s1600/Screen+Shot+2013-07-06+at+9.18.48+PM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://1.bp.blogspot.com/-ddE5Le_OrAs/UdjCHuNRIkI/AAAAAAAACTY/6ZGReoqZeHg/s1600/Screen+Shot+2013-07-06+at+9.18.48+PM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 28</td></tr></tbody></table>I used the cat command (For Windows, it&#8217;d be &#8220;type&#8221;) to display the contents of the simple file we created. &nbsp;Let&#8217;s stage and commit the thing. &nbsp;Type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git add README.md</span></blockquote>then type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git commit -m &#8220;Created a simple readme file&#8221;</span></blockquote>and finally:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git status</span></blockquote><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-DnT7X1I-I7k/UdjEU1f8BRI/AAAAAAAACTo/OQIonkPoMC8/s1600/Screen+Shot+2013-07-06+at+9.28.34+PM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/-DnT7X1I-I7k/UdjEU1f8BRI/AAAAAAAACTo/OQIonkPoMC8/s1600/Screen+Shot+2013-07-06+at+9.28.34+PM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 29</td></tr></tbody></table>Now we have two versions of a README.md file committed. &nbsp;You can see that your origin/master branch is one commit in one direction, and your master branch is one commit in the other direction. &nbsp;What will happen when I try to update master from origin/master? &nbsp;Let&#8217;s see! &nbsp;Type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git merge origin/master</span></blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-aIcCmlQV4pU/UdjFEqQV0WI/AAAAAAAACT0/G78QTsYQWNU/s1600/Screen+Shot+2013-07-06+at+9.31.46+PM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://1.bp.blogspot.com/-aIcCmlQV4pU/UdjFEqQV0WI/AAAAAAAACT0/G78QTsYQWNU/s1600/Screen+Shot+2013-07-06+at+9.31.46+PM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 30</td></tr></tbody></table>Just as you might think, git is flummoxed. &nbsp;This is essentially Git saying &#8221;<b>You</b> fix it.&#8221; &nbsp;Let&#8217;s see what state we&#8217;re in. &nbsp;Type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git status</span></blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-YV9dsoYGYXM/UdjG1Cg7XqI/AAAAAAAACUE/tLJiUtLomIg/s1600/Screen+Shot+2013-07-06+at+9.37.36+PM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://3.bp.blogspot.com/-YV9dsoYGYXM/UdjG1Cg7XqI/AAAAAAAACUE/tLJiUtLomIg/s1600/Screen+Shot+2013-07-06+at+9.37.36+PM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 31</td></tr></tbody></table><br />Can&#8217;t be any clearer, except for one detail. &nbsp;Git <b>is</b> telling us to type &#8220;git add/rm whatever&#8221; to &#8220;mark resolution. &nbsp;That means, in order to fix this, you could take one of two routes. &nbsp;<b>DON&#8217;T DO THIS!</b> &#8230; You could go into README.md, fix it up, then stage it with git add. &nbsp;Edit the README.md file. &nbsp;I&#8217;ll use vim, but you use whatever editor you want:<br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-O7u-QX61kng/UdjIC22rMmI/AAAAAAAACUU/cOH3prz8HGc/s1600/Screen+Shot+2013-07-06+at+9.44.10+PM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://3.bp.blogspot.com/-O7u-QX61kng/UdjIC22rMmI/AAAAAAAACUU/cOH3prz8HGc/s1600/Screen+Shot+2013-07-06+at+9.44.10+PM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 32</td></tr></tbody></table>You can see that the two versions are marked very clearly. &nbsp;HEAD represents &#8220;the current local branch you&#8217;re on&#8221;, which is master. &nbsp;If you review all the times you&#8217;ve typed &#8220;git status&#8221;, it&#8217;s told you that you&#8217;re on branch &#8220;master&#8221;. &nbsp;And we know &#8220;origin/master&#8221; is our local copy of the remote repository&#8217;s master branch. &nbsp;I&#8217;m going to remove the scary divider lines (e.g. &lt;&lt;&lt;&lt;, ====,&gt;&gt;&gt;&gt;) and replace those two versions of project descriptions with a new one:<br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-XuWNUoo5nYw/UdjJl7rPL6I/AAAAAAAACUk/jUve8TcHeNc/s1600/Screen+Shot+2013-07-06+at+9.50.57+PM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/-XuWNUoo5nYw/UdjJl7rPL6I/AAAAAAAACUk/jUve8TcHeNc/s1600/Screen+Shot+2013-07-06+at+9.50.57+PM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 33</td></tr></tbody></table>If you ignored my warning and you&#8217;re doing this, don&#8217;t save! &nbsp;Just exit out! &nbsp;But if you were doing this, you could save and exit, then &#8220;git add&#8221; the file, then &#8220;git commit&#8221;, to stage and commit. &nbsp;It&#8217;s actually better in some ways, because you&#8217;re able to rethink each change, and perhaps reword something like I was about to do for this README file.<br /><br />However, the reason I told you not to do this is because it&#8217;s the hard way, especially for complicated conflicts. &nbsp;Instead, while still in your project directory, having just experienced a failed merge command, type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git mergetool</span></blockquote><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;"></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-7B8As8i_h7Q/UdjO3nC5m4I/AAAAAAAACVM/53koWgLA9gc/s1600/start_mergetool.tiff" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://1.bp.blogspot.com/-7B8As8i_h7Q/UdjO3nC5m4I/AAAAAAAACVM/53koWgLA9gc/s1600/start_mergetool.tiff" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 34</td></tr></tbody></table><br />Mergetool will guide you through each conflicted file, letting you choose which version of each conflicted line you&#8217;d like to use for the committed file. &nbsp;You can see, by default, it will use &#8220;opendiff&#8221;. &nbsp;Press enter to see what &#8220;opendiff&#8221; looks like:<br /><br /><div class="separator" style="clear: both; text-align: center;"></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-IJ5kjmPSY1w/UdjVHDdwrHI/AAAAAAAACVs/kBZQ9mtax2k/s1600/Screen+Shot+2013-07-06+at+10.17.30+PM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="304" src="http://4.bp.blogspot.com/-IJ5kjmPSY1w/UdjVHDdwrHI/AAAAAAAACVs/kBZQ9mtax2k/s640/Screen+Shot+2013-07-06+at+10.17.30+PM.png" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 35</td></tr></tbody></table><br />If this were more than one line, you&#8217;d be able to say &#8220;use the left version for this conflict line&#8221;. &nbsp;Or &#8220;use the right version for this line&#8221;. &nbsp;Or &#8220;I don&#8217;t want to use either line.&#8221; &nbsp;In this case, we only have one conflicted line to choose from, so make it count! &nbsp;The one conflicted line is selected. &nbsp;Click on the &#8220;Actions&#8221; pull down menu and choose &#8220;Choose right&#8221;. &nbsp;You&#8217;ll see nothing changed. &nbsp;That was because that arrow in the middle was already pointing to the right. &nbsp;Try selecting &#8220;Choose left&#8221;, then &#8220;Choose right&#8221; again. &nbsp;You&#8217;ll see what I mean. &nbsp;Opendiff doesn&#8217;t give you the opportunity to put in your own custom line. &nbsp;You can do that later if you wish.<br /><br />At the pull down menu at the top of the screen, select &#8220;File&#8221; then &#8220;Save Merge&#8221;:<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-SU2CPFb4xAE/UdjXnzY_o5I/AAAAAAAACWE/WsVX1MSY9_U/s1600/Screen+Shot+2013-07-06+at+10.45.13+PM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://4.bp.blogspot.com/-SU2CPFb4xAE/UdjXnzY_o5I/AAAAAAAACWE/WsVX1MSY9_U/s1600/Screen+Shot+2013-07-06+at+10.45.13+PM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 36</td></tr></tbody></table><br />Go back to the menu and select &#8220;Quit FileMerge&#8221;. &nbsp;Now again type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git status</span></blockquote><br /><br /><div class="separator" style="clear: both; text-align: center;"></div><br />Select the line then<br />Let&#8217;s stage the new version of the readme file. &nbsp;Type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git add README.md</span></blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-kjDdMxAYG0I/UdjahPzDPQI/AAAAAAAACWU/QDXqP3lNAUo/s1600/Screen+Shot+2013-07-06+at+11.03.11+PM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/-kjDdMxAYG0I/UdjahPzDPQI/AAAAAAAACWU/QDXqP3lNAUo/s1600/Screen+Shot+2013-07-06+at+11.03.11+PM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 37</td></tr></tbody></table>All set to commit changes, just like if you manually modified and staged (with &#8220;git add&#8221;) the files yourself. &nbsp;Now type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git commit -m &#8220;Merged remote version of readme with local version.&#8221;</span></blockquote>and then:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git status</span></blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-sNyrCkquF2Q/UdjdQN9o4iI/AAAAAAAACWk/Kg-THQWJs80/s1600/Screen+Shot+2013-07-06+at+11.14.06+PM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/-sNyrCkquF2Q/UdjdQN9o4iI/AAAAAAAACWk/Kg-THQWJs80/s1600/Screen+Shot+2013-07-06+at+11.14.06+PM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 38</td></tr></tbody></table>Before we go on, if you noticed, there&#8217;s a lingering &#8220;README.md.orig&#8221; file. &nbsp;That&#8217;s just a backup in case the merged file you came up with looks horrible. &nbsp;However, it&#8217;s a pain to deal with these &#8220;orig&#8221; files. &nbsp;For this time, you can move the file somewhere, or just delete it, but, check out&nbsp;<a href="http://travisjeffery.com/b/2011/12/keeping-your-git-repo-clean-of-orig-files/">this page</a>&nbsp;on many strategies you can leverage to deal with those files.<br /><br />Back to the merge. &nbsp;Look! &nbsp;Your branch is &#8220;ahead&#8221; of &#8220;origin/master&#8221; by 2 commits. &nbsp;Let&#8217;s see what those commits are. &nbsp;To show just the last two commits, type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git log -n 2</span></blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-LTVQuJ130b0/UdjfA7CZOLI/AAAAAAAACW0/ZWPJk-uwLh0/s1600/Screen+Shot+2013-07-06+at+11.22.01+PM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://1.bp.blogspot.com/-LTVQuJ130b0/UdjfA7CZOLI/AAAAAAAACW0/ZWPJk-uwLh0/s1600/Screen+Shot+2013-07-06+at+11.22.01+PM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 39</td></tr></tbody></table>The earlier commit on the bottom is the one you did before, to create your local version of the readme file. &nbsp;The top commit is the &#8220;merge commit&#8221;, that Git uses to identify where two branches were merged. &nbsp;Now review what state &#8220;origin/master&#8221; is in with &#8220;git log origin/master&#8221;. &nbsp;We want our merged version of the readme to Github. &nbsp;Yes, we&#8217;re back on the internet! &nbsp;Let&#8217;s push our changes to origin/master and see what happens. &nbsp;Type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git push origin master</span></blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-X4rVH9EsNmw/UdjzCBbH97I/AAAAAAAACXE/Y15iNl8mBEE/s1600/Screen+Shot+2013-07-07+at+12.47.07+AM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/-X4rVH9EsNmw/UdjzCBbH97I/AAAAAAAACXE/Y15iNl8mBEE/s1600/Screen+Shot+2013-07-07+at+12.47.07+AM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 40</td></tr></tbody></table>Now, just to be sure, we&#8217;re not going to look at the &#8220;local version&#8221; of the remote branch. &nbsp;Let&#8217;s go right to Github to see what happened. &nbsp;View the commits in your repository:<br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-GigTtBK5FgQ/Udj6QWZMiNI/AAAAAAAACXU/3zLLaigucEU/s1600/Screen+Shot+2013-07-07+at+12.57.07+AM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="490" src="http://3.bp.blogspot.com/-GigTtBK5FgQ/Udj6QWZMiNI/AAAAAAAACXU/3zLLaigucEU/s640/Screen+Shot+2013-07-07+at+12.57.07+AM.png" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 41</td></tr></tbody></table>What might not make sense here, is that you have first the Github-side readme commit, then your local readme commit, <b>then</b> the merge. &nbsp;It doesn&#8217;t make sense for all of these commits to happen in sequence, since the first two are conflicting. &nbsp;What happens is that your local readme file commit is logged as a commit on a separate branch that is merged in. &nbsp;Let&#8217;s graphically demonstrate that by clicking on the &#8220;Network&#8221; button on the right (circled in red).<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-L4dan-Hk41o/UdkIBjCn4pI/AAAAAAAACXk/nEZob6EoY9M/s1600/Screen+Shot+2013-07-07+at+2.16.55+AM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://3.bp.blogspot.com/-L4dan-Hk41o/UdkIBjCn4pI/AAAAAAAACXk/nEZob6EoY9M/s1600/Screen+Shot+2013-07-07+at+2.16.55+AM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 42</td></tr></tbody></table>Each dot in this diagram represents a commit. &nbsp;Later commits are on the right. &nbsp;The one that looks like it was committed to a separate branch (your local master branch) and then <b>merged</b> in is the commit of your local version of the readme file. &nbsp;Hover over this dot and see for yourself.<br /><br /><i><span style="font-size: x-small;">It&#8217;s good to pull in remote changes not too infrequently, to minimize the complexity of conflicts.</span></i><br /><br /><span id="rebasing"></span><br /><h4>Rebasing</h4><br />This is as advanced as this tutorial is going to get, and you&#8217;re in the homestretch! &nbsp;Rebasing is meant to give you that clean, fresh feeling when committing your changes. &nbsp;With it, you can shape your commits how you prefer before merging them to another branch. &nbsp;But wait, you might think&#8230; You can already do that when you&#8217;re staging your files. &nbsp;You can stage and unstage files repeatedly, getting a commit exactly how you want. &nbsp;There are two main things that rebasing lets you do in addition to that.<br /><br />Let&#8217;s say you were working on branch A and you created branch B. &nbsp;<b>Branch B is nothing more than a series of changes made to a specific version of branch A</b>&nbsp;(starting with a specific commit in branch A). &nbsp;Let&#8217;s say you were able to take those changes and reapply them to the last commit in branch A. &nbsp;It&#8217;s as though you checked out branch A and you made the same changes. &nbsp;Read this paragraph as many times as you need to before you move on.<br /><br />Remember when I mentioned about fast-forward commits? &nbsp;When you viewed the commit history on Github, did you like seeing commits on other branches being merged in? &nbsp;Or would you have preferred one commit after another? &nbsp;Most prefer the latter. &nbsp;Merging can get quite messy in a worst-case scenario, but even if it&#8217;s not so bad, it&#8217;s not preferable. &nbsp;You can use rebasing to allow your merges to be &#8220;fast-forward&#8221;, so when you merge your changes into another branch, there&#8217;s no &#8220;merge commit&#8221;. &nbsp;Your changes are simply added as the next commits in the target branch, and the new latest commit of that branch is your last change.<br /><br />Let&#8217;s demonstrate before I talk about the next benefit. &nbsp;I explained how to create and switch to local branches at the end of the &#8220;Branches&#8221; section. &nbsp;Type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git branch testing</span></blockquote>We&#8217;re still in the master branch. &nbsp;Now let&#8217;s make another change to that awful readme file again. &nbsp;Load up your editor and add the line: &#8220;Inspired by the Gershwin brothers&#8221; then save:<br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-YS1Dxq9974M/UdkVez6PaLI/AAAAAAAACX0/GYTQ37vzhU0/s1600/Screen+Shot+2013-07-07+at+3.14.35+AM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/-YS1Dxq9974M/UdkVez6PaLI/AAAAAAAACX0/GYTQ37vzhU0/s1600/Screen+Shot+2013-07-07+at+3.14.35+AM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 43</td></tr></tbody></table>If you type &#8220;git status&#8221;, you&#8217;ll see the only modification is to the readme file. &nbsp;A shortcut I didn&#8217;t tell you about, to stage and commit all modified files at the same time,&nbsp;<b>if all the modified files have already been staged once&nbsp;</b>(they&#8217;re not &#8220;untracked&#8221;), is by using git commit&#8217;s &#8220;a&#8221; flag:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git commit -am &#8220;Added something to the readme file&#8221;</span></blockquote>then view the log with:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git log -n 2</span></blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-MqVAyw4GSWw/UdkYo_Ce7SI/AAAAAAAACYE/fJ8h-U2oWg8/s1600/Screen+Shot+2013-07-07+at+3.28.19+AM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://1.bp.blogspot.com/-MqVAyw4GSWw/UdkYo_Ce7SI/AAAAAAAACYE/fJ8h-U2oWg8/s1600/Screen+Shot+2013-07-07+at+3.28.19+AM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 44</td></tr></tbody></table>There&#8217;s our change, right after our merge commit. &nbsp;We&#8217;re not going to make the mistake of adding any more messy merge commits. &nbsp;Type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git checkout testing</span></blockquote>and then view the README.md file:<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-LzWcnw8YmPk/UdkcuAdYvBI/AAAAAAAACYU/jIFFSoZd34s/s1600/Screen+Shot+2013-07-07+at+3.45.43+AM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/-LzWcnw8YmPk/UdkcuAdYvBI/AAAAAAAACYU/jIFFSoZd34s/s1600/Screen+Shot+2013-07-07+at+3.45.43+AM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 45</td></tr></tbody></table>You see that your modification is no longer there. &nbsp;I&#8217;d have you modify the readme file again, but I think I&#8217;m done explaining conflict resolution. &nbsp;If you did modify readme, and then you wanted to reapply your changes over the latest version of the master branch, you&#8217;d have another bloody conflict to resolve. &nbsp;Let&#8217;s just create a change in our source code.<br /><br />Edit the file &#8220;src/main/scala/scottdanzig/potayto/Potayto.scala&#8221; and add the printing of &#8220;Ding!&#8221; as shown. &nbsp;Please, just humor me&#8230;<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-kkT76JfuHP4/UdkefuJF1NI/AAAAAAAACYk/r6s3HQ0DeQ8/s1600/Screen+Shot+2013-07-07+at+3.53.08+AM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://4.bp.blogspot.com/-kkT76JfuHP4/UdkefuJF1NI/AAAAAAAACYk/r6s3HQ0DeQ8/s1600/Screen+Shot+2013-07-07+at+3.53.08+AM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 46</td></tr></tbody></table>Now stage and commit:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git commit -am &#8220;Added the printing of Ding&#8221;</span></blockquote>then show the last two changes for both the current &#8220;testing&#8221; branch and the &#8220;master&#8221; branch with:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git log -n 2 &lt;branch&gt;</span></blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-X4Q1VkuxUBg/UdkgDlZz3YI/AAAAAAAACY0/a6D2UeSUiBU/s1600/Screen+Shot+2013-07-07+at+3.59.56+AM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/-X4Q1VkuxUBg/UdkgDlZz3YI/AAAAAAAACY0/a6D2UeSUiBU/s1600/Screen+Shot+2013-07-07+at+3.59.56+AM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 47</td></tr></tbody></table>There be a storm a-brewin&#8217;! &nbsp;Hang in there! &nbsp;If you merged the testing branch into master now, you&#8217;d again see your change added to the master branch, followed by a merge commit. &nbsp;Wouldn&#8217;t it be simple if we can recreate testing from the current version of master, then automatically make your change again for you? &nbsp;Then you&#8217;d only be adding your &#8220;Added the printing of Ding&#8221; commit. &nbsp;You can do just that right now. &nbsp;Type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git rebase master</span></blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-R_pBH8Rs8wM/UdkhikxfltI/AAAAAAAACZE/Y0YlGVQiL_Q/s1600/Screen+Shot+2013-07-07+at+4.05.44+AM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://4.bp.blogspot.com/-R_pBH8Rs8wM/UdkhikxfltI/AAAAAAAACZE/Y0YlGVQiL_Q/s1600/Screen+Shot+2013-07-07+at+4.05.44+AM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 48</td></tr></tbody></table>Git talks of &#8220;reapplying commits&#8221; as &#8220;replaying work&#8221;. &nbsp;How does it know which commits in your current branch to reapply/replay? &nbsp;It traverses down the branch, starting with the most recent commit, and finds the first commit that is in the master branch. &nbsp;Now let&#8217;s see the log:<br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-5d-vwNK6JHc/UdkiPrSbl9I/AAAAAAAACZM/Tp1JnunvJWc/s1600/Screen+Shot+2013-07-07+at+4.09.11+AM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://1.bp.blogspot.com/-5d-vwNK6JHc/UdkiPrSbl9I/AAAAAAAACZM/Tp1JnunvJWc/s1600/Screen+Shot+2013-07-07+at+4.09.11+AM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 49</td></tr></tbody></table>See? &nbsp;It&#8217;s exactly what I described. &nbsp;It&#8217;s as though you waited for that last change to master to be made before branching. &nbsp;Now see how easy it is to merge in your changes by switching to the master branch and doing the merge:<br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-ktqVWFmMLVU/UdkjlHYCS3I/AAAAAAAACZc/-jzh9FPUtvc/s1600/Screen+Shot+2013-07-07+at+4.14.57+AM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://4.bp.blogspot.com/-ktqVWFmMLVU/UdkjlHYCS3I/AAAAAAAACZc/-jzh9FPUtvc/s1600/Screen+Shot+2013-07-07+at+4.14.57+AM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 50</td></tr></tbody></table>A fast-forward merge is <b>so</b> easy.<br /><br />I mentioned there are <b>two</b> things rebasing lets you do that you can&#8217;t do just with staging. &nbsp;There&#8217;s this notion of &#8220;interactive rebasing&#8221; that I think is the coolest part of git. &nbsp;This is the last part of the tutorial where you have to do anything, so this is the homestretch of the homestretch. &nbsp;Now we&#8217;re going back to our testing branch (currently the same as master) and create two new files, A and B. &nbsp;I&#8217;m going to keep this simple. &nbsp;Type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git checkout testing</span></blockquote>then:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">echo test &gt; A</span></blockquote>and stage and commit that change. &nbsp;File &#8220;A&#8221; is new/untracked, so you can&#8217;t use the &#8220;-am&#8221; shortcut:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git add A</span></blockquote>and then:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git commit -m &#8220;Added A&#8221;</span>&nbsp;</blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-3-DPsSt_2Tw/Udkm0HelmHI/AAAAAAAACZs/F3vmFAn4_m4/s1600/Screen+Shot+2013-07-07+at+4.28.37+AM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://4.bp.blogspot.com/-3-DPsSt_2Tw/Udkm0HelmHI/AAAAAAAACZs/F3vmFAn4_m4/s1600/Screen+Shot+2013-07-07+at+4.28.37+AM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 51</td></tr></tbody></table>Now create another file, B:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">echo test &gt; B</span></blockquote>and stage then commit as well:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git add B</span><span style="font-family: Courier New, Courier, monospace;">git commit -m &#8220;Added B&#8221;</span></blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-YLVJJzhcM3w/UdknaE61d0I/AAAAAAAACZ0/yKjwUmsD5YY/s1600/Screen+Shot+2013-07-07+at+4.31.10+AM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://3.bp.blogspot.com/-YLVJJzhcM3w/UdknaE61d0I/AAAAAAAACZ0/yKjwUmsD5YY/s1600/Screen+Shot+2013-07-07+at+4.31.10+AM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 52</td></tr></tbody></table>You&#8217;ll see both of those commits in the log:<br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-X-VXj4-yaho/UdkoBLdTa-I/AAAAAAAACaA/ILcizN4hgtE/s1600/Screen+Shot+2013-07-07+at+4.33.56+AM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://1.bp.blogspot.com/-X-VXj4-yaho/UdkoBLdTa-I/AAAAAAAACaA/ILcizN4hgtE/s1600/Screen+Shot+2013-07-07+at+4.33.56+AM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 53</td></tr></tbody></table>Okay, we&#8217;re all set to show off interactive rebasing. &nbsp;We&#8217;re going to combine those two commits you just did into one commit. &nbsp;You have two options:<br /><br /><ul><li>You can do this in the same branch, if you just want to reorganize a branch while you&#8217;re working with it.</li><li>You can also combine commits when you&#8217;re rebasing (reapplying/replaying) them onto another branch.</li></ul><br />If you don&#8217;t think this is the bees knees, you&#8217;re nuts. &nbsp;We&#8217;re going to do the rebasing the second way, while rebasing onto master. &nbsp;The latest change on master is contained in the testing branch, so rebasing just to avoid merge commits would be unnecessary. &nbsp;Merging testing into master would be a fast-forward merge. &nbsp;However, we&#8217;re also going to use this opportunity to combine the two commits. &nbsp;Rebasing can be multi-purpose that way. &nbsp;Type:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">git rebase -i master</span></blockquote><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-dqfBsbWMPBI/Udkr1NGnQ7I/AAAAAAAACao/blwlQBEYS4s/s1600/Screen+Shot+2013-07-07+at+4.50.10+AM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/-dqfBsbWMPBI/Udkr1NGnQ7I/AAAAAAAACao/blwlQBEYS4s/s1600/Screen+Shot+2013-07-07+at+4.50.10+AM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 54</td></tr></tbody></table>Git might scare you with a vim editor window like this. &nbsp;You see those two &#8220;pick&#8221; lines at the top? This &nbsp;is a list of the commits that are going to be reapplied, with the oldest change on top. &nbsp;If you change an instance of the word &#8220;pick&#8221; to &#8220;squash&#8221;, the commit listed on that line will get combined/melded into the older commit above it. &nbsp;You need the oldest commit you want to reapply to be a &#8220;pick&#8221;. &nbsp;You can use &#8220;p&#8221; and &#8220;s&#8221; instead of &#8220;pick&#8221; and &#8220;squash&#8221; by the way. &nbsp;If you want, you can even remove some commits from this list all together, but be careful. &nbsp;That effectively removes all record of that commit from the current branch. &nbsp;Oh look! &nbsp;It even warns you in ominous CAPITAL LETTERS.<br /><br />Let&#8217;s change the second &#8220;pick&#8221; to a &#8220;squash&#8221;. &nbsp;It&#8217;s possible to change your default editor from &#8220;vim&#8221; if you want, but if you prefer vim like me or just haven&#8217;t got around to it yet, just heed my instructions:<br />Use the arrow keys to move the cursor to the &#8220;p&#8221; of the second &#8220;pick&#8221;.<br /><br /><ol><li>Type &#8220;cw&#8221; to change the word.</li><li>Type &#8220;s&#8221; then press the escape button.</li><li>Type &#8220;:x&#8221; to exit and save.</li></ol><br />Now you should see a screen allowing you to create the new commit message:<br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-LsvsRymaDT4/UdkvbYDTb1I/AAAAAAAACa4/eAFFIqHpKlg/s1600/Screen+Shot+2013-07-07+at+5.04.41+AM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://4.bp.blogspot.com/-LsvsRymaDT4/UdkvbYDTb1I/AAAAAAAACa4/eAFFIqHpKlg/s1600/Screen+Shot+2013-07-07+at+5.04.41+AM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 55</td></tr></tbody></table>This gives you the opportunity to write the new description, perhaps multi-lined for the combined commit. &nbsp;By default, Git will just put all the combined commit messages one after the other. &nbsp;If you want, you can accept that and just type &#8220;:x&#8221; to exit and save. &nbsp;Or, you can use vim to modify the file to your liking. &nbsp;If you want to give it a shot, just press &#8220;i&#8221; to go into insert mode, then use the arrows to move around and backspace to delete. &nbsp;When you&#8217;re done, press the escape key then type &#8220;:x&#8221;. &nbsp;Here&#8217;s my modified file:<br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-2K5FBXKS_uM/UdkxDMZXMDI/AAAAAAAACbI/wT-2IvHuXmU/s1600/Screen+Shot+2013-07-07+at+5.12.06+AM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://1.bp.blogspot.com/-2K5FBXKS_uM/UdkxDMZXMDI/AAAAAAAACbI/wT-2IvHuXmU/s1600/Screen+Shot+2013-07-07+at+5.12.06+AM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 56</td></tr></tbody></table>I could have ignored the lines starting with #, but I got rid of some of them for clarity. &nbsp;Here&#8217;s what the log looks like after I saved and exited:<br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-5D-I2CJ00dI/UdkxvdgsvGI/AAAAAAAACbQ/NaQ0n1YyM6A/s1600/Screen+Shot+2013-07-07+at+5.14.31+AM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://3.bp.blogspot.com/-5D-I2CJ00dI/UdkxvdgsvGI/AAAAAAAACbQ/NaQ0n1YyM6A/s1600/Screen+Shot+2013-07-07+at+5.14.31+AM.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig. 57</td></tr></tbody></table>See the one big commit? &nbsp;That &#8220;printing of Ding&#8221; commit afterward is the latest commit currently in the master branch, so merging the testing branch into master would be a fast-forward merge. &nbsp;I&#8217;d demonstrate that, but I&#8217;d rather avoid redundancy and finish the tutorial.<br /><br /><span id="pull-requests"></span><br /><h4>Pull Requests</h4><br />Commits are often grouped into &#8220;feature branches&#8221;, representing all the changes needed for a branch. &nbsp;How projects with designated maintainer(s) often operate is as follows:<br /><br /><ul><li>You push your &#8220;feature branch&#8221; to a remote repository, often your fork of the main repository.</li><li>You create a &#8220;pull request&#8221; on Github for that branch, which tells the project maintainer that you want your branch merged into the master branch.</li><li>If the branch is recent enough where it&#8217;s spawned from the most recent commit on the project&#8217;s master branch, or it can be rebased onto master without any conflicts, the maintainer can easily merge in your changes.</li><li>If there are conflicts, then it&#8217;s up to the maintainer to do the merge, or to reject the pull request and let you rebase and deconflict the commits in your branch yourself.</li></ul><br /><h3></h3><span id="new-york-magazine-development-environment"></span><br /><h3>New York Magazine Development Environment</h3><br />At New York Magazine, where I work, we generally have 4 main branches of each project entitled dev, qa, stg, prod. &nbsp;We have software called <a href="http://jenkins-ci.org/">Jenkins</a>&nbsp;that monitors each branch, and when any change is made, the project is redeployed to a computer/server dedicated to that environment. &nbsp;</div><div><ul><li><b>dev</b>&nbsp;branch - While developers first test their code on their own computers, eventually they need to test changes on a server with shared resources. &nbsp;This often exposes a bunch of integration issues so often a change requires multiple commits (multiple attempts to get it right) before the change is complete. &nbsp;It&#8217;s a necessary evil that developers simultaneously make changes in this environment for their own features. Hopefully, someone else&#8217;s changes don&#8217;t affect testing of your own changes.</li><li><b>qa</b>&nbsp;branch - This is branch is for QA (quality assurance) testing to be done on a new change. &nbsp;The branch is cleaner, only having completed changes, and, although everything isn&#8217;t necessarily optimized (maybe you do have debugging information being recorded to the log, for instance), it&#8217;s much more controlled as opposed to dev.</li><li><b>stg</b>&nbsp;branch - Changes approved by QA go to the &#8220;staging&#8221; environment. &nbsp;This environment to be fully optimized, as if it were the production environment. &nbsp;There could be more issues that are exposed by testing in a fully optimized environment, but usually not. &nbsp;<span style="font-size: x-small;"><i>This is not to be confused with the much lower-level staging in git, but ultimately, the concept is the same. &nbsp;You&#8217;re ultimately preparing a set of features that are slated to go public, rather than a bunch of file changes that are about to be committed.</i></span></li><li><b>prod</b>&nbsp;branch - What your clients/customers/users ultimately see is deployed directly from this branch.</li></ul></div><div>To manage the environment-specific configuration, including enabling optimizations and altering logging levels, we use&nbsp;<a href="http://puppetlabs.com/puppet/puppet-enterprise/">Puppet</a>. &nbsp;We also use Git to maintain our internal documentation, written as text files using the Git-variety of Markdown, to allow ease of collaboration and code-friendly formatting. &nbsp;Hosting a project on Github is free unless it&#8217;s to be private. &nbsp;Most New York Magazine repositories are private.<br /><br />Each commit message at New York Magazine, optimally, should have a &#8220;story number&#8221;. &nbsp;A &#8220;story&#8221; is a description of a desired modification. &nbsp;If something should be changed in code, someone describes how the change works in a web interface provided by a story-tracking application such as Atlassian&#8217;s&nbsp;<a href="http://www.atlassian.com/software/jira">JIRA</a>, which we use. &nbsp;A developer can modify the &#8220;status&#8221; of the story to reflect progress being made toward its resolution.<br /><br />We use something called&nbsp;<a href="http://www.atlassian.com/software/crucible/overview">Crucible</a>&nbsp;for &#8220;peer code reviews&#8221;. &nbsp;This lets a developer send a series of commits out to fellow developers to have a look at. &nbsp;It tracks who has had a change to review your code, and gives them the opportunity to make comments.<br /><br /><br /><span id="my-preferred-workflow-with-git"></span><br /><h3>My Preferred Workflow with Git</h3><br />I&#8217;m typically tasked with a modification I must make to a shared project hosted as a Github repository as I described. &nbsp;On Github, I have a separate user, &#8220;scottdanzig&#8221; for my job-related Github activity, which allows clear separation of my personal projects from what I&#8217;ve done that is New York Magazine property. &nbsp;For my examples, I&#8217;ll refer to a web application created with Scala and the Play Framework, that provides restaurant listings for your mobile device. &nbsp;Let&#8217;s say we realized that the listings load very fast, and we can afford to display larger pictures. &nbsp;Here is my preferred workflow:<br /><br /><span id="changing-the-code"></span><br /><h4>Changing the Code</h4><br /><br /><ul><li>First thing I do is change the status of the JIRA story I&#8217;m going to work on to &#8220;In Progress&#8221;.</li><li>If I don&#8217;t yet have the project cloned onto my machine, I&#8217;ll do that first: <span style="font-family: Courier New, Courier, monospace;">git clone https://github.com/nymag/listings.git</span></li><li>I checkout the dev branch: <span style="font-family: Courier New, Courier, monospace;">git checkout dev</span></li><li>I update my dev branch with the latest from the remote repository: <span style="font-family: Courier New, Courier, monospace;">git pull origin dev</span></li><li>I create and checkout a branch off dev: <span style="font-family: Courier New, Courier, monospace;">git checkout -b larger-pics</span></li><li>I make my modifications and test as much as I can, staging and committing my changes after successfully testing each piece of the new functionality.</li><li>I&#8217;ll then update my dev branch again, so when I merge back, hopefully it&#8217;s a fast-forward merge: <span style="font-family: Courier New, Courier, monospace;">git pull origin dev</span></li><li>I&#8217;ll interactively rebase my larger-pics branch onto my dev branch. &nbsp;This gives me an opportunity to change all my commits to one big commit, to be applied to the latest commit on the dev branch: <span style="font-family: Courier New, Courier, monospace;">git rebase -i dev</span> then I change all &#8220;picks&#8221; but the top one to a squash. &nbsp;I write one comprehensive commit message detailing my changes so far, making sure to start with the JIRA story number so people can review the motivation behind the change. &nbsp;<span style="font-size: x-small;"><i>It&#8217;s possible I might want to not combine all my commits yet. &nbsp;If I&#8217;m not sure if one of the incremental changes is necessary, I may decide to keep it as a separate commit. &nbsp;This is possible if you leave it as a separate &#8220;pick&#8221; during the interactive rebasing. &nbsp;Git will give you an opportunity to rewrite the commit description for that commit separately.</i></span></li><li>I checkout the dev branch: <span style="font-family: Courier New, Courier, monospace;">git checkout dev</span></li><li>Then I merge in my one commit: <span style="font-family: Courier New, Courier, monospace;">git merge larger-pics</span></li><li>Then I push it to Github: <span style="font-family: Courier New, Courier, monospace;">git push origin dev</span></li><li>If it complains about it not being a fast-forward merge and rejects my change, I may need to rebase my dev branch onto origin/dev and then try again. &nbsp;We&#8217;re not going to combine any commits, so it doesn&#8217;t need to be interactive: &nbsp;<span style="font-family: Courier New, Courier, monospace;">git rebase origin/dev</span> then again: <span style="font-family: Courier New, Courier, monospace;">git push origin dev</span></li><li>Jenkins will detect the commit and kick off a new build. &nbsp;I can log into the Jenkins web interface and watch the progress of the build. &nbsp;It&#8217;s possible the build will fail, and other developers will grumble at me until I fix the now broken dev environment. &nbsp;Let&#8217;s say I did just that.</li><li>If I think it might be a while before I&#8217;m able to fix my change, I&#8217;ll use &#8221;<span style="font-family: Courier New, Courier, monospace;">git revert &lt;SHA code&gt;</span>&#8221; to undo the commit then quickly push that to dev. &nbsp;Either way, I&#8217;ll again checkout my larger-pics branch, <span style="font-family: Courier New, Courier, monospace;">git rebase dev</span>, then make changes, <span style="font-family: Courier New, Courier, monospace;">git pull origin dev</span>, <span style="font-family: Courier New, Courier, monospace;">git rebase dev</span>, <span style="font-family: Courier New, Courier, monospace;">git checkout dev</span>, <span style="font-family: Courier New, Courier, monospace;">git merge larger-pics</span>, <span style="font-family: Courier New, Courier, monospace;">git push origin dev</span>. &nbsp;Let&#8217;s say Jenkins gives me the thumbs up now.</li><li>Next stage is the code review. &nbsp;I&#8217;ll log into Crucible and advertise my list of commits in the dev branch for others to review. &nbsp;I can make modifications based on their feedback if necessary.</li></ul><br /><br /><span id="submitting-to-qa"></span><br /><h4>Submitting to QA</h4><br />Let&#8217;s say both Jenkins and my fellow developers are happy. &nbsp;It&#8217;s time to submit my code to QA. &nbsp;The QA branch is automatically deployed by Jenkins to the QA servers, a pristine environment meant to better reflect what actually is accessed by New York Magazine&#8217;s readers. &nbsp;We have some dedicated QA experts to systematically test my functionality to make sure I didn&#8217;t unintentionally break something. &nbsp;If there are no QA experts available, QA might be done by another developer if the feature is sufficiently urgent.<br /><ul><li>I need to update my local QA branch so I can rebase my changes onto it, pushing fast-forward commits. &nbsp;I first type: <span style="font-family: Courier New, Courier, monospace;">git pull origin qa</span></li><li>Then I change to my larger-pics branch: <span style="font-family: Courier New, Courier, monospace;">git checkout larger-pics</span></li><li>It&#8217;s time to rebase my commits onto the qa branch, rather than dev, which can be polluted by the works in progress of other developers. &nbsp;I type: <span style="font-family: Courier New, Courier, monospace;">git rebase -i qa</span>, creating a combined commit message describing my entire set of changes. &nbsp;I now have a branch that is the same as QA, plus one fast-forwardable commit that reflects all of my changes.</li><li>I add my branch to the remote repository: <span style="font-family: Courier New, Courier, monospace;">git push -u origin larger-pics</span></li><li>I go to the repository on Github and <a href="https://help.github.com/articles/creating-a-pull-request">create a pull request</a>,&nbsp;requesting my larger-pics branch be merged into the qa branch.</li></ul><br /><br /><span id="the-project-maintainer"></span><br /><h4>The Project Maintainer</h4><br />At this point, it&#8217;s out of my hands, for the time being. &nbsp;However, the project has a &#8220;maintainer&#8221; assigned.<br /><br /><ul><li>The maintainer can first use the Github interface to&nbsp;<a href="https://help.github.com/articles/using-pull-requests">see the changes</a>. &nbsp;The maintainer can give a last check for the code.</li><li>If approved, the maintainer must <a href="https://help.github.com/articles/merging-a-pull-request">merge the branch</a>&nbsp;targeted by the pull request to the qa branch. &nbsp;If the commit will have no conflicts, Github&#8217;s interface is sufficient to merge in the change. &nbsp;Otherwise, the maintainer either can reject the change, requesting for the original developer of the change to rebase the branch again and resolve the conflict before creating a new pull request. &nbsp;Otherwise, the maintainer can checkout the branch locally and resolve the merge, rather than the original developer doing it.</li><li>The maintainer commits the merged change and updates the JIRA story to &#8220;Submitted to QA&#8221;.</li><li>If QA finds a bug, they will change the JIRA status to &#8220;Failed QA&#8221;. &nbsp;The maintainer will checkout the QA branch and use &#8220;git revert&#8221; to roll back the change, then will reassign the JIRA ticket back to the original developer.</li><li>If QA approves the change however, they will change the JIRA status to &#8220;Passed QA&#8221;.</li></ul><br /><br /><span id="release-day"></span><br /><h4>Release Day</h4><br />At regular intervals, a development team will release a set of features that are ready and desired. &nbsp;A release consists of:<br /><ul><li>A developer merging QA-approved changes from the QA branch to the staging branch.</li><li>Members of the team having a last look at the change&#8217;s functionality in the staging environment.</li><li>The developer of a change, after confirming that it works correctly in staging, merges the change into the prod branch before a designated release cutoff time.</li><li>The developer changes the status of the JIRA story to &#8220;Resolved&#8221;</li><li>The system administrators will deploy a build including the last commit before the cutoff time. &nbsp;For New York Magazine, this entails a brief period of down-time, so the release is coordinated with the editors and others who potentially will be affected.</li></ul><br /><span id="whats-not-set-in-stone"></span><br /><h4>What&#8217;s Not Set in Stone</h4><br />That&#8217;s a summary of how I work, and although everything is &#8220;sensible&#8221;, it&#8217;s a bit in flux. &nbsp;These are things which could be changed:<br /><br /><ul><li>We can get rid of the staging environment, and merge directly from QA. &nbsp;I see the value in this extra level of testing, but I believe four stages is a bit too cumbersome.</li><li>A project does not necessarily need a maintainer, and if we use Crucible, perhaps not even pull requests. &nbsp;A developer can merge his change directly into the QA branch and submit the story to QA on his/her own. &nbsp;I prefer to have a project maintainer.</li><li>We can get rid of Crucible, and just use the code review system in Github. &nbsp;It might not be as feature-filled, but if we use pull requests, it&#8217;s readily available and could streamline the process. &nbsp;I like Crucible, although it might be worth exploring eliminating this redundancy.</li></ul><br /><br /><span id="conclusion"></span><br /><h3>Conclusion</h3><br />After years of using many other version control systems, Git has proven to be the one that<br />makes the most sense. &nbsp;It&#8217;s certainly not dependent on a reliable internet connection. &nbsp;It&#8217;s fast. &nbsp;It&#8217;s very flexible. &nbsp;After over 20 years of professional software development, I conclude Git is an absolutely indispensable tool.</div></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BuddyChat, a Simple Example of Akka Actors with an Akka FSM]]></title>
    <link href="http://sdanzig.github.io/blog/2013/06/30/buddychat-simple-example-of-akka-actors/"/>
    <updated>2013-06-30T00:00:00-04:00</updated>
    <id>http://sdanzig.github.io/blog/2013/06/30/buddychat-simple-example-of-akka-actors</id>
    <content type="html"><![CDATA[<div class='post'>
<style>.post-body img, .post-body .tr-caption-container, .ss, .Profile img, .Image img, .BlogList .item-thumbnail img {   padding: none !important;   border: none !important;   background: none !important;   -moz-box-shadow: 0px 0px 0px transparent !important;   -webkit-box-shadow: 0px 0px 0px transparent !important;   box-shadow: 0px 0px 0px transparent !important; } </style> I wrote a silly chat program in Scala to demonstrate functionality provided by something called &#8220;Akka&#8221;, which is available for both Scala and Java. &nbsp;It lets you easily write your program so that:<br /><br /><ul><li>Everything is asynchronous, which means that things can be run at the same time when possible. &nbsp;If two people want to say hello, let them say hi at the same time. &nbsp;Those &#8220;hello&#8221; messages will be be displayed when they arrive, in whatever order. &nbsp;Being able to run things in parallel is massively important when a computer has more than one processor, or some things might have to wait to complete, such as, perhaps, searching for a Wikipedia article.</li><li>Asynchronous programming is safe. &nbsp;With &#8220;lower-level&#8221; implementations, it&#8217;s very easy to screw up, and your software, although perhaps faster, will be prone to crashing or generating erroneous results.</li></ul><br />Without further ado, let me introduce you to BuddyChat! &nbsp;It&#8217;s ugly and it&#8217;s silly, but it&#8217;s educational. &nbsp;For people who want to see it on github.com, it&#8217;s publicly available here:<br /><br /><a href="https://github.com/sdanzig/buddychat">https://github.com/sdanzig/buddychat</a><br /><br />And here&#8217;s a sample test run:<br /><br /><br /><script src="https://gist.github.com/sdanzig/5894101.js"></script> <br /><h3>Description</h3><br />The &#8220;gist&#8221; of this is that you&#8217;re participating in a chatroom. &nbsp;You run BuddyChat. &nbsp;BuddyChat creates the manager of the chat. &nbsp;This manager will create all the participants, both automated and human. &nbsp;The one human participant it creates represents you and will provide you an interface to make it speak in the chat room. &nbsp;Whenever a participant speaks, the message goes to the chat manager who forwards the message on to the other participants.<br /><br />There are a couple other little features I&#8217;ll describe later, but that&#8217;s the brunt of it. &nbsp;Here&#8217;s a diagram showing this:<br /><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-lhU_VH12UR8/Ud-nRd254QI/AAAAAAAACdM/G-WBqgSiy6Q/s1600/Blank+Flowchart+-+BuddyChat+Diagram+(2).png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-lhU_VH12UR8/Ud-nRd254QI/AAAAAAAACdM/G-WBqgSiy6Q/s1600/Blank+Flowchart+-+BuddyChat+Diagram+(2).png" /></a></div>Aside from the slightly different names, and a couple of the messages, it&#8217;s exactly as described. &nbsp;The arrows represent both the actual construction of the objects, and also sending messages between them.<br /><br /><br /><h3>Construction</h3><br /><ol><li>The <b>BuddyChat</b> object is automatically created when the application is run.</li><li>The BuddyChat object builds <b>ChatManager</b>.</li><li>ChatManager builds the three <b>BuddyActor</b>s (the automated chat participants)</li><li>ChatManager builds <b>UserActor</b>.</li><li>UserActor builds <b>ConsoleActor</b>, which accepts input from you.</li></ol><br /><h3>Messaging</h3><br /><ol><li>BuddyChat starts off ChatManager with a <b>CreateChat</b> message.</li><li>ChatManager receives CreateChat, then constructs the participants.</li><li>ChatManager starts off all participants with a <b>Begin</b> message, which all but UserActor ignores.</li><li>UserActor starts off ConsoleActor with an <b>EnableConsole</b> message.</li><li>ConsoleActor sends each line of text you type as a <b>MessageFromConsole</b> message to UserActor.</li><li>UserActor will send this text in a <b>Speak</b> message to the ChatManager.</li><li>ChatManager will record the Speak message to its history, then forward it onto the BuddyActors.</li><li>In response, each BuddyActor generates and sends a new Speak message to ChatManager.</li><li>ChatManager will record each Speak message to its history, then forward them to the other participants. The BuddyActors will see the new messages are not from a human and will ignore them. The UserActor prints out the message to the screen.</li></ol><br />There are also other messages UserActor can send ChatManager:<br /><br /><ul><li><b>KillChat</b> - Shut down the chat application. &nbsp;Generated when UserActor receives &#8220;done&#8221;.</li><li><b>StopChat</b> - ChatManager will clear its chat history and stop accepting Speak messages. &nbsp;Generated when UserActor receives &#8220;stop&#8221;.</li><li><b>StartChat</b> - ChatManager will resume accepting Speak messages. Generated when UserActor receives &#8220;start&#8221;.</li></ul><br /><h3>ChatManager&#8217;s Finite State Machine (FSM)</h3><br />I love finite state machines. &nbsp;Let me explain what it is:<br /><br /><blockquote class="tr_bq">Something can be in just one out of a set of states. &nbsp;When in a particular state, it behaves a particular way. When a particular condition is met, it can transition to a different state.</blockquote><br />That&#8217;s it. &nbsp;They make it very easy to model potentially complex software. &nbsp;Just think of what your possible states are, and what it takes to get from one state to another. &nbsp;I implemented ChatManager as a finite state machine. &nbsp;The states it can be in are:<br /><br /><ul><li>ChatOffline</li><li>ChatOnline</li></ul><br />By default, ChatManager is in the ChatOffline state. &nbsp;Upon receiving the CreateChat message, it transitions to the ChatOnline state. &nbsp;Receiving StopChat and StartChat messages will cause ChatManager to transition to ChatOffline and ChatOnline, respectively, if not already in the target state.<br /><br />Given this, there&#8217;s a negligible hiccup that occurs because, in response to a CreateChat message. &nbsp;ChatManager will create a UserActor, then can send it a Begin message just before transitioning to ChatOnline. &nbsp;What this means is, for a very short but existent period of time, the UserActor can send a Speak message while the state is still ChatOffline, which would consequently get ignored. &nbsp;Akka provides you a way to specify something to occur during a particular transition. &nbsp;In this case, ChatManager sends out the Begin message on the transition from ChatOffline to ChatOffline.<br /><br /><br /><h3>Finite State Machine Data</h3><br />Okay, I lied, there&#8217;s one more complexity to at least Akka&#8217;s version of FSM, which I used. &nbsp;Akka works very cleanly if you adhere to the design and don&#8217;t use anything that&#8217;s &#8220;shared&#8221;. &nbsp;By this, I mean you&#8217;re not supposed to let things write information/data to the same place at the same time, or even read the same data if it could change at any point. &nbsp;The way Akka actors (which all those Actors mentioned before, plus ChatManager are) can safely communicate are through messages. &nbsp;Just like the Begin message wasn&#8217;t sent out until in the ChatOnline state, it&#8217;s possible to also ensure that a piece of data changes at the same time the state changes. &nbsp;ChatManager uses this data-handling to manage its list of chat participants, and the chat history.<br /><br /><br /><h3>The Code</h3><div><br />The source code for BuddyChat is available at:</div><div><br /><a href="https://github.com/sdanzig/buddychat">https://github.com/sdanzig/buddychat</a><br /><br /></div><div>To start, we&#8217;ll look at the first thing that does something&#8230;<br /><br /><h4>The BuddyChat Object</h4><br />The first line shows how, in Akka, an actor is created. &nbsp;&#8220;manager&#8221; is a unique name you can use to refer to the actor later. &nbsp;It&#8217;s not meant to look pretty, and adheres to a number of restrictions, such as having no spaces, but I use it for display purposes in this demo so I don&#8217;t have to bother with storing a more visually appealing name. &nbsp;The second line is sending a basic message to ChatManager, to tell it to get things started. &nbsp;It&#8217;s quite possible to send just Strings as messages, such as:</div><div><br /><pre>manager ! "create chat"</pre><br />However, by having a specific message class &#8220;CreateChat&#8221;, the compiler can warn you about typos.<br /><br /><h4>ChatManager</h4><br />ChatManager starts off as follows:<br /><br /><script src="https://gist.github.com/sdanzig/5895406.js"></script> ChatManager inherits the functionality of Akka&#8217;s Actor, and it&#8217;s given the FSM trait, which allows it to operate as a finite state machine. &nbsp;The number of automated participants is controlled by this hard-coded constant. &nbsp;ChatManager is initialized as being in the ChatOffline state, and with no users and no chat history. &nbsp;Not even empty lists, which is why it&#8217;s simply Uninitialized.<br /><br />Akka&#8217;s structure for handling messages when in a state is quite intuitive. &nbsp;It follows the paradigm: &#8220;When in state A, handle messages of type 1 this way and messages of type 2 that way.&#8221; &nbsp;See ChatManager&#8217;s logic in the ChatOffline state:<br /><br /><script src="https://gist.github.com/sdanzig/5895581.js"></script> As you can see, when offline, ChatManager can handle a CreateChat message and a StartChat message. &nbsp;I won&#8217;t dive too much into how case classes work in Scala, but I will point out that you don&#8217;t just see &#8220;case CreateChat&#8221; here. &nbsp;You see &#8220;case Event(some message type, some state data)&#8221;. &nbsp;This is being used not only to respond to a particular incoming message, but also to read in the state data. &nbsp;It&#8217;s possible to also have it respond to a message type differently depending on what your data is. &nbsp;In this case, we know we only want to respond to CreateChat messages when the data is Uninitialized, so we specify this. &nbsp;This ensures that if we erroneously get a CreateChat message after the chat has been created, the message will be ignored, because although the message type matches CreateChat, the state data does not match Uninitialized.<br /><br />Upon reception of CreateChat, ChatManager instantiates the sole UserActor, named &#8220;user&#8221;, and the three BuddyActors. &nbsp;The combination of the two,<br /><br /><pre>user :: list</pre><br />becomes the new state data upon transitioning (going to) the ChatOnline state. &nbsp;CreateChat is one message, when there is no state data, that can provoke this transition. &nbsp;The other is StartChat, but only if the chat participants are already created. &nbsp;That stipulation is reflected by ChatData(chatters, _). &nbsp;The underscore is a placeholder for the chat history, used to convey indifference to what, if any, chat history exists. &nbsp;Checking the list of chatters alone is sufficient to ensure StartChat is processed only when it should be. &nbsp;Upon processing a StartChat message, ChatManager will transition to the ChatOnline state, retaining the list of chatters, and creating a new, empty chat history (List[String]()).<br /><br />As mentioned before, ChatManager has some logic for immediately after transitioning from offline to online, to avoid the window of time when a UserActor can send a Speak message when ChatManager is still offline (and thus being ignored):<br /><br /><script src="https://gist.github.com/sdanzig/5895744.js"></script> While the automated BuddyActors ultimately ignore the Begin message, because they only send messages in response to the user anyway, the UserActor, upon receiving a Begin message, will instruct the ConsoleActor to start receiving keyboard input. &nbsp;One more quirk here. &nbsp;This part:<br /><br /><pre>(Uninitialized, ChatData(chatters, _)) &lt;- Some(stateData,nextStateData)</pre></div><div><br /></div><div>What that is doing is ensuring the Begin message is only sent out when the chat participants are first created. &nbsp;The state data goes from completely uninitialized to existing state data complete with a list of chatters. &nbsp;If the change in state data doesn&#8217;t match that, then nothing happens during the transition.<br /><br />While in the ChatOnline state, ChatManager uses this message handling logic:<br /><br /><script src="https://gist.github.com/sdanzig/5896431.js"></script> <br />In this state, ChatManager can now accept Speak messages. &nbsp;Upon receiving a Speak message, ChatManager will forward the message to all chat participants except (different from) the sender, which is where the &#8220;diff&#8221; is applied. &nbsp;&#8220;forward&#8221; is used to re-send the messages rather than the typical ! because forward will send the message as if it were from the same &#8220;sender&#8221;. &nbsp;Akka allows you to, upon receiving a message, access the sender of that message, and if ChatManager used !, it would appear that ChatManager originated the message. &nbsp;This allows the message receiver to handle a message in a different way based on who sent it.<br /><br />When writing BuddyChat, I initially allowed BuddyActor to respond to all incoming messages, but ultimately the problem arose where all the BuddyActors responded to other BuddyActors repeatedly and endlessly. &nbsp;By only responding to messages where the sender has the name &#8220;user&#8221;, the BuddyActor is assured to avoid this issue.<br /><br />Note Speak does not cause a transition. &nbsp;ChatManager will &#8220;stay&#8221; at its current state. &nbsp;However, it uses updated state data (ChatData) which has a chat history that includes the new message.<br /><br />ChatManager also can receive a StopChat method while in ChatOnline state. &nbsp;This will cause ChatManager to go to &#8220;ChatOffline&#8221; state, and while the list of chatters are preserved in the new ChatData, the chat history is replaced by an empty list of messages.<br /><br />When there is no case that matches the message in the handler for the particular state, the message is dealt with in the whenUnhandled block:<br /><br /><script src="https://gist.github.com/sdanzig/5897455.js"></script> In either state, ChatManager should be able to handle the KillChat message, so it makes sense to receive it here. &nbsp;While whenUnhandled certainly can deal with messages that are unexpected in the current state, the fall-through logic that leads messages to whenUnhandled makes it a perfect place to handle messages that are treated the <b>same</b> in <b>any</b> state. &nbsp;ChatManager does not have to clean up any resources upon shutdown, so it can call context.system.shutdown to end the application immediately. &nbsp;Just for demonstration&#8217;s sake, ChatManager prints out the entire chat history first, summarizing who said what. &nbsp;Note that when ChatManager stores text from Speak messages, it prepends the name of the actor that generated the message.<br /><br />If a message is actually unexpected, there is a catch-all handler that will log the message with current state data as a warning, but otherwise do nothing.<br /><br /><h4>UserActor</h4><br />A UserActor is constructed by ChatManager when it receives a CreateChat message. &nbsp;Upon creation, the UserActor will create a ConsoleActor. &nbsp;Very soon after UserActor is created, ChatManager will enter ChatOnline state then pass it a Begin message. &nbsp;UserActor is not a finite state machine. &nbsp;It will respond to the same set of messages the same way no matter the circumstances. &nbsp;The messages are handled by UserActor&#8217;s receive method:<br /><br /><script src="https://gist.github.com/sdanzig/5897510.js"></script> Upon receiving a Begin message, UserActor sends an EnableConsole message to ConsoleActor it created. &nbsp;If the UserActor tried to wait for user input directly (which I initially tried to do), it would not be able to receive any further messages. &nbsp;Why is this?<br /><blockquote class="tr_bq">An actor in Akka has a message queue which is processed one message at a time. &nbsp;Waiting for keyboard input is a &#8220;blocking&#8221; operation, which means that execution ceases until keyboard input is received. &nbsp;Because you need to repeatedly wait for the next line of input in a loop, the Begin message handler would never exit. &nbsp;It would just repeatedly end up waiting for keyboard input.</blockquote>The solution is to let ConsoleActor handle it. &nbsp;If ConsoleActor receives one message and then endlessly waits for user input, this is okay, because it&#8217;s running in another &#8220;thread of execution&#8221;.<br /><br />UserActor, after enabling the console input, will wait for an incoming MessageFromConsole. &nbsp;If the text encapsulated by this message is one of the following, there is special handling:<br /><br /><ul><li>&#8220;done&#8221; - Upon receiving this, UserActor will send ChatManager a KillChat message to shut down the chat system.</li><li>&#8220;stop&#8221; - UserActor will send ChatManager a StopChat message to disable the chatting and clear the chat history.</li><li>&#8220;start&#8221; - UserActor will send ChatManager a StartChat message to re-enable chatting.</li></ul><br />If the text does not match any of those, UserActor will encapsulate the text in a Speak message and send it to ChatManager, allowing the user to communicate with the other chat participants.<br /><br />From the ChatManager, UserActor can receive Speak messages which would have originated from other chat participants (BuddyActors) and then been forwarded by ChatManager. &nbsp;Because the Speak message &nbsp;was forwarded rather than resent, the sender is the actor that generated the message, not the ChatManager that directly sent it to the UserActor. &nbsp;This allows the UserActor to pull out the originator&#8217;s name to identify the sender of the message for display purposes (labeledText).<br /><br />There&#8217;s one more nifty thing to mention about this &#8220;matching&#8221; methodology in receive. &nbsp;Later you&#8217;ll see the declaration of the messages that are passed around between actors. &nbsp;If all of the messages that an actor can receive have a &#8220;sealed trait&#8221;, then whenever you are handling a message with this trait, Scala can confirm that you have handled every possible message that has this trait. &nbsp;This is called &#8220;checking for completeness&#8221; in a pattern match.<br /><br /><h4>ConsoleActor</h4></div><div><br />ConsoleActor&#8217;s sole purpose is to accept input from the keyboard and send it to the UserActor in a MessageFromConsole message.</div><div><br /></div><div><script src="https://gist.github.com/sdanzig/5897617.js"></script></div><div>It receives one message, EnableConsole, and then displays instructions enters the loop that accepts lines of input from the keyboard. &nbsp;For each line, a MessageFromConsole message is sent to the UserActor, which ConsoleActor identifies as its &#8220;parent&#8221;, since UserActor created it. &nbsp;The only thing that can exit this loop, is when &#8220;done&#8221; is typed. &nbsp;That fancy getLines.takeWhile is generating a &#8220;stream&#8221;, which is a feature in Scala.<br /><br /><i><span style="font-size: x-small;">A stream can be iterated over just like a list, and each element is generated on the fly. &nbsp;The takeWhile, upon detecting a value that doesn&#8217;t meet a condition, will make the for loop think it&#8217;s just reached the end of the list, instead of processing the nonconforming value from the stream.</span></i><br /><i><span style="font-size: x-small;"><br /></span></i>After the loop has terminated, &#8220;done&#8221; is sent to UserActor to shut down the chat.<br /><br /><h4>BuddyActor</h4><br />BuddyActor&#8217;s sole purpose is to respond to messages from UserActor.<br /><br /><script src="https://gist.github.com/sdanzig/5897827.js"></script> testJust to make BuddyActor interchangeable with a fully functional UserActor, BuddyActor handles all the messages that a ChatManager might send to any other chat participant, such as UserActor: &nbsp;Speak and Begin, although it will ignore the Begin message. &nbsp;In the Speak message handler, the message is also ignored if the sender&#8217;s name is not &#8220;user&#8221;. &nbsp;This prevents a BuddyActor from endlessly conversing with another BuddyActor. &nbsp;When responding to a Speak message, BuddyActor will randomly generate one of three silly responses, including the text from the received message in the reply. &nbsp;This inclusion is mainly to prove that BuddyActor is successfully receiving the forwarded message from the UserActor.<br /><br />The random number generator, &#8220;rand&#8221;, uses a &#8220;seed&#8221; that is affected by the current time in milliseconds along with the &#8220;path&#8221; of the actor, which must be unique amongst actors. &nbsp;Without a random number seed, the random number generator would generate the same sequence of numbers.<br /><br /><h4>Messages</h4><br />The messages passed between actors are defined as follows:<br /><br /><script src="https://gist.github.com/sdanzig/5898494.js"></script> The messages are given traits such that all possible messages an actor can receive share a common trait. If you accidentally remove the handling for a message in that set, the Scala compiler will warn you. &nbsp;The &#8220;sealed&#8221; keyword means that all the possible classes that use that sealed trait are in the same file. &nbsp;This allows the programmer to guarantee that all messages which use the trait are accounted for.<br /><br />There are two subtleties used here while defining these traits:<br /><br /><br /><ul><li>A message class can have more than one trait. &nbsp;The Speak message is a ChatParticipantSystemMessage and a ChatManagementSystemMessage. &nbsp;That means, respectively, that it&#8217;s one of the messages that a chatter can receive, and also one of the messages that ChatManager handles.</li><li>A trait can have another trait. &nbsp;By saying that a ChatParticipantSystemMessage has the UserSystemMessage, you&#8217;re saying that the set of messages with the UserSystemMessage trait is equal to or greater than the set of messages with the ChatParticipantSystemMessage trait. &nbsp;Any message with the ChatParticipantSystemMessage trait also has the UserSystemMessage trait, so the set of user system messages are at least that set, and perhaps more. &nbsp;In this case, there&#8217;s one additional message that a UserActor can receive that the other chatters (the BuddyActors) can&#8217;t receive. &nbsp;The MessageFromConsole is from ConsoleActor. &nbsp;ConsoleActor only communicates with UserActor, so this makes sense.</li></ul><br /><br /><h3>Conclusion</h3><br />The BuddyChat system certainly is only meant to serve educational purposes. &nbsp;However, it demonstrates many very useful technologies within both Akka, and Scala as well. &nbsp;Programmers no longer need to fear multi-threaded programming as long as they properly use an actor system such as provided by Akka. &nbsp;Akka&#8217;s FSM can simplify the implementation of a complex system by grouping its behaviors by its possible states. &nbsp;While the significant overhead of the actor framework is not suitable for applications requiring maximum performance (such as handling billions of tweets or time-sensitive stock ticker updates), in which case lower-level handling of parallel execution is recommended, Akka actors are amazingly easy to deal with and should be used otherwise.<br /><br /><br /><h3>Notes</h3><br />I&#8217;m unsure if there&#8217;s a way to do some form of completeness checking in the FSM handlers. &nbsp;I&#8217;d guess not, but please let me know if there&#8217;s a way.<br />I tried implementing the check for the name &#8220;user&#8221; as a guard in the pattern match:<br /><br /><pre>case Speak(msg) if "user".equals(sender.path.name)</pre><br />I had a case Speak(msg) after that to catch the other Speak messages and ignore them. &nbsp;However, this disabled the completeness checking. &nbsp;I saw in older versions of Scala that guards were handled improperly and this had been fixed, but perhaps the change was reverted, or, more likely, I&#8217;m doing something wrong.</div><div><br /></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Optimization of Java's HashMap class]]></title>
    <link href="http://sdanzig.github.io/blog/2013/06/27/the-optimization-of-javas-hashmap/"/>
    <updated>2013-06-27T00:00:00-04:00</updated>
    <id>http://sdanzig.github.io/blog/2013/06/27/the-optimization-of-javas-hashmap</id>
    <content type="html"><![CDATA[<div class='post'>
Yesterday I was on Quora.com sifting through some Q&amp;A and I ran across someone describing an optimization that was made in Java&#8217;s HashMap class, according to the poster around version 1.4. &nbsp;It was simple, yet it amazed me. &nbsp;I didn&#8217;t understand how it could work at first, but with a little digging, I figured it out, and it&#8217;s simple yet very clever. &nbsp;First I&#8217;ll briefly explain some of how a hash map works, for the laymen (I think everyone can understand most of this), then I&#8217;ll go on to describe the change.<br /><br /><br /><h3>Description of What a Hash Map is</h3>A hash map is a way a computer can store a set of things in memory for quick access. &nbsp;Picture I had a function that took a word, let&#8217;s say &#8220;bird&#8221;, and converted it to a number, such as 7. &nbsp;As long as you had the same input, you&#8217;d always get the same output. &nbsp;So when you wanted to access a bunch of information with the label &#8220;bird&#8221;, you can find it in storage bin number 7. &nbsp;You only have to look in one bucket, so it&#8217;s super-fast.<br /><br />Optimally, your function will have a unique number for every unique word. &nbsp;Ideally it would, but the function might not be perfect, and if &#8220;bird&#8221; and &#8220;potato&#8221; both produce a 7, then if you want to look up either, you might have to check two spots in memory instead of one, which takes longer. &nbsp;This is called a &#8220;collision&#8221;, and you want a function that avoids them as much as possible.<br /><br />Now, it&#8217;s true that if you had a billion words, it&#8217;s unrealistic that your computer could have a billion separate spots in memory to hold it. &nbsp;But your function produces unique numbers for nearly all of them, so you ultimately want the hash map to have a place for each number. &nbsp;What a HashMap will do is take the number of spots in memory it DOES have (let&#8217;s say 16), and divide the number output of the function by it, and use the remainder instead. &nbsp;This is the &#8220;modulo operation&#8221;, represented by the percent (%) sign. &nbsp;That way, you&#8217;re never trying to put something in a memory location that your hash map can&#8217;t support. &nbsp;So if your function said &#8220;banana&#8221; should go in spot 39, then you&#8217;d see 39 % 16 = 7.<br /><br />Certainly you&#8217;re going to have plenty of collisions, but there are a couple of key optimizations that can be made. &nbsp;First, you want the function to spit out numbers that are as evenly distributed as possible, so you don&#8217;t have a bad scenario where you&#8217;re searching through most of the words because they all resulted in, for instance, the number 7. &nbsp;There are formulas provided by others who have thought this through already, so just use those. &nbsp;Secondly, when the hash map gets too full, it will increase the number of spaces available, and move all the old words to their new locations based on the new number of &#8220;spots&#8221;.<br /><br />Just so you can talk the talk, the spots in memory a hash map has available are called &#8220;buckets&#8221;. &nbsp;The function that converts words to numbers is called a &#8220;hash function&#8221;. &nbsp;The numbers are called &#8220;hash codes&#8221;. &nbsp;The words are called &#8220;keys&#8221;, and the &#8220;bunch of information&#8221; attached to a key is called a &#8220;value&#8221;.<br /><br /><br /><h3>Java&#8217;s Hash Map Optimization</h3><br /><script src="https://gist.github.com/sdanzig/5901481.js"></script> The above modification shows the change, but it&#8217;s dependent on a couple of other behaviors of the Java hash map. &nbsp;First, I&#8217;ll review what&#8217;s going on. &nbsp;I mentioned how modulo is used to determine what bucket a specific hash code maps to. &nbsp;This is replacing that modulo with a &#8220;bitwise AND&#8221;. &nbsp;I&#8217;m not going to review too much about binary here, but it&#8217;s all 1&#8217;s and 0&#8217;s instead of 0-9 like the base-10 (decimal) numbers you&#8217;re used to. &nbsp;So if you have 1 &amp; 1, you get 1. &nbsp;But if either or both is a 0, you get 0. &nbsp;Picture converting the hash code and the number of buckets to a bunch of 1 and 0 &#8220;bits&#8221;, then doing this AND operation on each bit, from right (least significant/smallest) to left.<br /><br />If you think about it, you might wonder how this works, because it&#8217;s not the same thing as modulo. &nbsp;If you have 5 buckets, you&#8217;re converting 4 to binary &#8211; 100 (google &#8220;4 in binary&#8221;). &nbsp;That means whatever your hash code is, only the third bit will matter because the other bits will be ANDed to 0. &nbsp;indexFor will always output either a 0 or a 4. &nbsp;That will be a crazy amount of collisions.<br /><br /><h4>First Trick</h4><br />There will never <b>be</b> 5 buckets. &nbsp;Java&#8217;s hash map implementation, when expanding, multiplies the number of buckets by 2. &nbsp;You&#8217;ll always have a power of 2 (1, 2, 4, 8, 16, etc). &nbsp;When you convert a power of 1 to binary, you only have one bit as a 1. &nbsp;When you subtract 1 from a power of 2 and convert that to binary, that bit is a 0, and all the bits to the right of it are 1. &nbsp;Try ANDing a bunch of 1&#8217;s with anything and you get the modulo of what those 1&#8217;s represent in decimal plus 1. &nbsp;ANDing bits like this is much faster than doing a modulo, which requires division and subtraction.<br /><br /><h3>Second Trick</h3><br />There&#8217;s also a concern which might not be obvious, but if you are relying on only the smallest bits of your hash code, you can easily get an uneven distribution of keys in your buckets unless you have a really good hash function. &nbsp;What Java&#8217;s hash map implementation does is to &#8220;rehash&#8221; the hash code. &nbsp;Check this out:<br /><br /><script src="https://gist.github.com/sdanzig/5901495.js"></script> <br />This scary thing takes your mostly unique hash code and randomizes it in a way that has a relatively even distribution in the &#8220;lower bits&#8221;. &nbsp;For curiosity&#8217;s sake, I&#8217;ll mention that the &gt;&gt;&gt; is shifting the bits in your hash code to the right&#8230; so if you had a 4, or 100 in binary, and you did 4 &gt;&gt;&gt; 2, you&#8217;d end up with 001, because it&#8217;s been right-shifted twice. &nbsp;The ^ is an &#8220;exclusive OR&#8221; operation, which is similar to the AND operation, but it outputs a 1 if the two bits are different (one&#8217;s a 1, and the other is 0). &nbsp;Essentially this thing is ensuring that the more significant bits in your hash code are affecting the least significant bits that you&#8217;re ultimately going to use to choose each bucket.<br /><br /><br />Hope you found this all as righteous as I did!</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Option Design Pattern]]></title>
    <link href="http://sdanzig.github.io/blog/2013/06/17/the-option-design-pattern/"/>
    <updated>2013-06-17T00:00:00-04:00</updated>
    <id>http://sdanzig.github.io/blog/2013/06/17/the-option-design-pattern</id>
    <content type="html"><![CDATA[<div class='post'>
  When starting to learn Scala, front and center was the utility of the Option design pattern. &nbsp;I think it&#8217;s useful, but at first it&#8217;s fairly unwieldy, and it&#8217;s much more useful when you know how to reasonably work with it.<br />The problem the Option pattern attempts to solve is the frequency of the NPE (null pointer exception), certainly a constant thorn in the side of every Java programmer. The problem is that you&#8217;re mixing the valid range for a value with something that is invalid, &#8220;null&#8221;. By allowing this combination, anyone who uses your provided value must be aware and provide accommodation for the possibility that this &#8220;I am invalid!&#8221; placeholder can occur. &nbsp;There are no safeguards indigenous to a language such as Java, so if you forget to handle this, your software can exhibit an error at runtime.<br />The Option pattern removes the placeholder from the range of possible values by wrapping it in an &#8220;Option&#8221; object. This object can be one of two derivative classes: Some, or None. &nbsp;If it&#8217;s a &#8220;Some&#8221; object, it has a value that&#8217;s guaranteed to be in the valid range. &nbsp;If it&#8217;s a None object, it represents the &#8220;absence of a valid value&#8221;.<br />Scala cleanly handles Option objects via pattern matching. &nbsp;For example, talkAboutValue is a simple method that takes an Option object, and displays a value if it&#8217;s something, and doesn&#8217;t attempt to display a value if it&#8217;s nothing:<br /><br /><div><script src='https://gist.github.com/5802273.js'></script>
<noscript><pre><code></code></pre></noscript></div>
 Scala displays a compile-time warning if None is not handled in talkAboutValue&#8217;s pattern matching, encouraging comprehensive handling of the input. The input for the talkAboutString method is not an Option, so it&#8217;s expected that the input will be a valid String. &nbsp;This allows the programmer to confidently call the length method, without worrying about an NPE. &nbsp;You can still input a null to talkAboutString, and handle the null value the Java-way (e.g. if(str==null) {&#8230; ) but Scala discourages this.<br />A very inescapable instance where Scala makes use of the Option object is with its implementation of Maps. &nbsp;When you query a value, it&#8217;s either in the map or it&#8217;s not. &nbsp;If it&#8217;s not, rather than returning a null value like you may have been accustomed to in a language like Java, Scala returns a value of None. <br /><br /><script src="https://gist.github.com/sdanzig/5802364.js"></script> Unfortunately, even for a lookup resulting in a valid value, you still have the Option object &#8220;wrapper&#8221; to deal with. &nbsp;That means you have to do not only the &#8220;get&#8221; for the lookup, but another to get the actual value. An &#8220;if(val != null)&#8221; seems much easier than doing a pattern match every time.<br />Fortunately, Scala alleviates this via facilities in its core API. The most obvious is &#8220;getOrElse&#8221;.<br /><br /><script src="https://gist.github.com/sdanzig/5802494.js"></script> This doesn&#8217;t alter the handling of the value if a lookup is unsuccessful, but it does at least provide a default value, which may be appropriate in many situations such as a default configuration setting. Another very common use case is handling a list of Options resulting from iterating over a collection:<br /><script src="https://gist.github.com/sdanzig/5802502.js"></script>It&#8217;s not so bad in this single-use instance, but if you plan on using a collection of Options repeatedly, you may wish to preprocess it, to remove the wrapper objects:<br /><br /><script src="https://gist.github.com/sdanzig/5802517.js"></script> Flatten results in a list of just the unwrapped values in the Some objects.<br /><br />Flatten is the same method that can concatenate the lists in a list to a single list. E.g. List(List(1,2),List(3,4)).flatten results in List(1,2,3,4). If you care, the way flatten is able to operate on a list of Options is because of an implicit method, option2Iterable. An option can be converted to a list of 0 or 1 elements (0 for None, 1 for Some) with its toList method. This implicit method is called by flatten, resulting in the same treatment as a list of lists:<br /><pre>implicit def option2Iterable[A](xo: Option[A]): Iterable[A] =<br />  xo.toList<br /></pre>Scala, despite its infamously steep learning curve, is beautiful in the way that its implicits provide for such ease of use for common programming tasks. Along those lines, it&#8217;s also common for one to have a list of values that must be passed to a method which results in an Option. If you only want to handle the iterations with successful results, such as values successfully retrieved from a map, there is another accommodation called &#8220;flatMap&#8221;, which replaces a sequence of flatten then map.<br /><br /><script src="https://gist.github.com/sdanzig/5802546.js"></script> You can see that the function passed to flatMap is only run on the last names that are successfully found in the map.<br /><br />Two more nifty things to know. &nbsp;If you pass a Java object to the constructor of Option, it will automatically wrap non-null values with Some() and null values are replaced by None. For instance, try going to your Scala REPL and type: <br /><pre>Option(null)</pre><br />Now try: <br /><pre>Option(3)</pre><br />And lastly, just to demonstrate how easy working with Options can be, please check out <a href="http://blog.tmorris.net/posts/scalaoption-cheat-sheet/">Tony Morris&#8217;s nifty cheat sheet</a>. &nbsp;If you notice yourself handling an Option in a certain way, there&#8217;s a very good chance Scala, or at least the scalaz library, provides you a shortcut you can replace it with:<br /><br /><strong>Conclusion</strong><br />In summary, I agree the Option pattern seems to get in the way when you&#8217;re starting out with Scala, but in the end, it results in much safer code, free from one of the most ruthlessly frequent runtime errors of our time. Scala makes it not only available, but also easy to work with, so learn to love it!</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self Introduction]]></title>
    <link href="http://sdanzig.github.io/blog/2013/06/17/self-introduction/"/>
    <updated>2013-06-17T00:00:00-04:00</updated>
    <id>http://sdanzig.github.io/blog/2013/06/17/self-introduction</id>
    <content type="html"><![CDATA[<div class='post'>
Hello internet people,<br />I&#8217;ve been a computer programmer since my parents bought me an Apple IIc when I was 7. &nbsp;I&#8217;m 36 now, and my path in life, since then, went like this:<br /><ul><li><strong>ProDOS BASIC</strong>, for choose your own adventure games on the Apple IIc</li><li><strong>Labview for Windows</strong>, at an AT&amp;T Bell Labs internship</li><li><strong>MudOS LPC</strong>, when I ran my own MUD</li><li><strong>Java</strong>, for developing a legend of Zelda-like game for Software Engineering class</li><li><strong>Perl</strong>, for an AT&amp;T e-billing system</li><li><strong>Perl</strong>, <strong>PL/SQL</strong> and <strong>Java</strong>, for the backend functionality at Register.com</li><li><strong>J2EE</strong>, for enterprise-networking software at Avaya</li><li><strong>C</strong>, <strong>Java</strong>, <strong>Visual C++</strong>, and <strong>C#</strong>, for simulation software at CSC</li><li>Visual C++ and Java, for operational awareness software at Viecore FSD and then Future Skies</li><li><strong>Java</strong> and <strong>C</strong>, for flight simulation software at MIT Lincoln Laboratory</li><li><strong>Javascript</strong>/<strong>CSS</strong> for front end and <strong>Java</strong> with <strong>Spring</strong> for backend, transferring and accessing broadcast video at Reuters</li><li><strong>Python</strong>, <strong>Flex</strong>/<strong>Actionscript</strong>, and <strong>Java</strong>, for portfolio accounting software at Hedgeserv</li><li><strong>Scala</strong>, <strong>Java</strong>, <strong>Python</strong>, and <strong>Objective C</strong>, for web and mobile publishing at New York Magazine</li></ul>At this point in my career, I have three main interests that serve as the motivation for this blog:<br /><ul><li>I am invigorated by the recent push in the world of software development toward <strong>functional</strong>, <strong>non-blocking programming</strong>. &nbsp;In particular, I&#8217;ve absolutely loved learning about <strong>Scala</strong> recently, and plan to work towards greater expertise leveraging its capabilities.</li><li>I have become more attuned to the need for adherence to established <strong>design patterns</strong>, and want to better familiarize myself with them, in an effort to better exploit their capabilities given an opportunity.</li><li>It is difficult to stay abreast of all immediately-relevant <strong>open source technologies</strong>. &nbsp;For nearly any challenge that exists in programming, I&#8217;ve found that someone has developed some sort of solution that will at least partially alleviate its inherent difficulties.</li></ul>So, in general, that&#8217;s what I&#8217;ll be posting about. &nbsp;Nice to make your acquaintance, don&#8217;t be a stranger, and feel free to point out anything I wrote that you think is good, bad, right, wrong, misguided or silly.<br />Thanks for reading!</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro]]></title>
    <link href="http://sdanzig.github.io/blog/2012/07/22/intro/"/>
    <updated>2012-07-22T08:23:00-04:00</updated>
    <id>http://sdanzig.github.io/blog/2012/07/22/intro</id>
    <content type="html"><![CDATA[<p>Testing!</p>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sollicitudin, massa eu vestibulum laoreet, nibh ante vulputate lorem, ac lobortis ante tellus eu mi. Duis sem nisi, luctus at feugiat eget, fringilla ut tellus. Nam a molestie justo. Sed pulvinar est vitae tellus semper tincidunt. Fusce euismod luctus lacus nec placerat. Mauris rutrum scelerisque nulla ut tempor. Nunc porttitor posuere mi, aliquet vehicula lorem feugiat in. Ut ut fermentum risus. Aliquam tincidunt ultricies ante sit amet bibendum. Cras nec sapien odio. Duis posuere congue sem, at congue massa faucibus at.</p>

<p>Integer ut sapien eget nisl auctor faucibus ut fermentum arcu. Nunc rutrum urna non risus congue et tristique felis eleifend. Maecenas blandit est eu mauris aliquam aliquet. Quisque porttitor enim eget risus blandit in mollis orci eleifend. Nam malesuada nulla sed lacus elementum placerat accumsan arcu rhoncus. Phasellus feugiat cursus turpis nec facilisis. Duis eget metus arcu, eget commodo velit. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Integer cursus vulputate enim, vel gravida velit faucibus et. Ut a urna vitae tellus cursus rhoncus. Maecenas at odio eget quam cursus elementum. Aliquam vitae eros quis tellus laoreet accumsan sed id lorem. Suspendisse et rutrum leo. Integer scelerisque vestibulum adipiscing. In posuere, libero ac accumsan suscipit, nulla ligula gravida erat, ut tempor odio erat nec sem. Quisque justo ipsum, adipiscing volutpat varius vitae, blandit eget nisi.</p>

<p>Nullam adipiscing neque ac lacus commodo vitae imperdiet dui sollicitudin. Ut ac nunc augue. Nam at sem ut quam commodo aliquet vitae vitae dui. Vivamus scelerisque felis eget dolor cursus feugiat. Phasellus at dui sed lectus scelerisque pretium. Etiam nec massa ut justo vestibulum fringilla ac vitae urna. Morbi tortor erat, tempus sed consectetur at, elementum nec eros. Vivamus mattis arcu a sapien semper non lacinia eros pretium.</p>

<p>Proin ut hendrerit arcu. Maecenas ullamcorper tristique magna vel mattis. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nullam tincidunt euismod viverra. In sit amet neque turpis. Suspendisse ac sapien mi, id blandit purus. Ut tortor turpis, rutrum ac tempor at, accumsan sit amet erat. Etiam ultricies eleifend dolor, eget tempus justo tristique vitae. In hac habitasse platea dictumst. Aliquam eu enim neque.</p>

<p>Morbi massa lorem, viverra non dictum at, malesuada vel nibh. Nam fermentum lobortis varius. Sed a nulla lacus, quis posuere risus. Nunc id urna libero, quis rutrum mi. In gravida felis urna. Praesent nec dolor ac urna tempor fermentum. Curabitur rutrum arcu et lorem volutpat viverra.</p>
]]></content>
  </entry>
  
</feed>
